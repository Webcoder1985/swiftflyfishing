
{% comment %} Auto-generated by Wholesale All In One (https://apps.shopify.com/wholesale-all-in-one) application. Do not remove it, otherwise wholesale application won't work {% endcomment %}
{% comment %}
CURRENT VERSION: 2.3.4
LAST EDITED: Jan 13
{% endcomment %}
{%- assign waio_version = '2.3.4' -%}
{%- assign last_updated = 'Jan 13' -%}
<script src="https://cdn.shopify.com/s/javascripts/currencies.js"></script>
<script>
/****
INSTRUCTIONS FOR DEVELOPERS
    *
    * Modify only waioSelectors and waioTranslations, if required, don't modify other code.
    * If you are writing any line of code about this application, you must write it in any other file.
    * Don't put any line of code in this file.
    * This file can be modified automatically by the wholesale application with updates (if any), so your work will lost.
    * IE Support added for latest version 11.xx
    * Stable version for automatic discount, waio discounts and coupon code. We are combining these discounts.
****/

// wholesale all in one's waioSelectors
var waioSelectors = {

    "wholesalePriceClass": ".waio-collection-grid",
    "check_discount": 0,

    "waioProductPriceClass": ".waio-product-template",

    "waioProductDataPriceAttr": "waio-product-price",

    "waioProductDataIdAttr": "waio-product-id",

    "dataItemPriceAttr": "data-price",

    "dataItemIdAttr": "data-item-id",

    "quickViewDataAttr": "quick-view-data-id",

    "wholesaleDataKeyAttr": "waio-item-total-id",

    "waioSingleDataKeyAttr": "waio-item-single-id",

    "cartSubtotalPriceAttr": "waio-subtotal",

    "checkout": "[name*=checkout]",

    "addToCart": "form[action='/cart/add']",

    "savedAmount": ".waio-saved-amount-msg",

    "couponInputField": ".waio-coupon-input-field",

    "couponCodeForm": ".waio-coupon-code-form",

    "additionalDiscountMsgClass": ".waio-additional-discount-msg",

    "qtyPlusMinusClass": ".ajaxcart__qty-adjust",

    "qtyInputFieldClass": ".ajaxcart__qty-num",

    "variantsChangeSelectorClass": ".single-option-selector",

    "qtyMultipler": "[data-quantity-select], [name='quantity']",

    "qtyIncPlus": ".btn-plus span.up-qty",

    "qtyIncMinus": ".btn-plus span.down-qty",

    "qtyWrapper": "[data-product-form]",

    "shopifyPaymentButton": ".shopify-payment-button",

    "buyNowClass": ".shopify-payment-button__waio"
};

// Translate from default waioTranslations to your own.
var waioTranslations = {
    "variant_title": "Variant Name",
    "discount": "Discount",
    "buy": "Buy",
    "price": "Price per item",
    "quantity": "Quantity",
    "off": " Off",
    "from": "From ",
    "min_quantity": "Minimum Qty",
    "max_quantity": "Maximum Qty",
    "range_seperator": " to ",
    "percent_symbol": "%",
    "currency_symbol": "$",
    "range_so_on": " + ",
    "qualifies_full_message": "This product qualifies for [[discount]] discount!",
    "coupon_code_btn": "Apply",
    "buy_now_button": "Buy it now"
};

var waio_saved_amount_text = "You saved [[saved_amount]] amount.";

if ((typeof WholesaleAIO) === 'undefined') {
    window.WholesaleAIO = {};
}
if ((typeof WholesaleAllInOne) === 'undefined') {
    window.WholesaleAllInOne = {};
}
if ((typeof waioMOC) === 'undefined') {
    window.waioMOC = {};
}

</script>

{%- assign products_per_page = 20 -%}
{% assign collections_id = '' %}
{% for item in cart.items %}{% for collection in item.product.collections %}{% assign collections_id = collections_id | append: product_id: item.product_id,collection_id:collection.id | append: ';' %}{% endfor %}{% endfor %}
{% assign collections_a = collections_id | replace: '=>', ':' | replace: '"', '' %}
{% assign collections_ids = collections_a | remove_last: ',' | split: ';' %}
{% capture pro_json %}{% for item in collections_ids %}{% if forloop.last == true %}{{item}}{% else %}{{item}},{% endif %}{% endfor %}{% endcapture %}
{% capture product_json %}[{{ pro_json }}]{% endcapture %}
{%- assign general_settings = shop.metafields.waioSettings.general_settings -%}
{% capture discountRule %}{% for discount_rule in shop.metafields.waioDiscountRule %}{% if forloop.last == true %}{{ discount_rule | last |replace:'"', '\"'  }}{% else %}{{ discount_rule | last | replace:'"', '\"'  }},{% endif %}{% endfor %}{% endcapture %}
{% capture wholesaleQB %}{% for qb in shop.metafields.waioQB %}{% if forloop.last == true %}{{ qb | last | replace:'"', '\"' }}{% else %}{{ qb | last | replace:'"', '\"' }},{% endif %}{% endfor %}{% endcapture %}
{% capture selected_variant %}{{ product.selected_or_first_available_variant.id }}{% endcapture %} 
{% assign rules_operator = 'and' %}{%- for OC in shop.metafields.waioOC -%}{% assign key = OC | first %}{% assign item = OC | last %}{% if item.status == 'active' %}{%assign rules_operator = item.rules_operator %}{%assign rules_message = item.message %}{% capture rules_checked %}{% for rule in item.rules %}{% case rule.column %}{%when 'cart_original_total_price'%}{%assign rule_price = rule.condition |times: 100 %}{%case rule.relation %}{%when 'equal'%}{%if cart.original_total_price == rule_price %}true{%else%}false{%endif%}{%when 'not_equal'%}{%if cart.original_total_price != rule_price %}true{%else%}false{%endif%}{%when 'greater_than'%}{%if rule_price < cart.original_total_price  %}true{%else%}false{%endif%}{%when 'less_than'%}{%if rule_price > cart.original_total_price %}true{%else%}false{%endif%}{%else%}{%endcase%}{%when 'customer_has_an_account' %}{%case rule.relation %}{%when 'equal'%}{%if rule.condition == 'true' %}{%if customer %}true{%else%}false{% endif %}{%endif%}{%when 'not_equal'%}{%if rule.condition == 'true' %}{%if customer %}false{%else%}true{% endif %}{%endif%}{%else%}{%endcase%}{%when 'customer_tag' %}{%case rule.relation %}{%when 'equal'%}{%if customer %}{%for tag in customer.tags %}{% if tag == rule.condition%}true{%break%}{% endif %}{% if forloop.last == true %}false{% endif %}{%endfor%}{%else%}false{%endif%}{%when 'not_equal'%}{%if customer %}{%for tag in customer.tags %}{% if tag != rule.condition%}true{%break%}{% endif %}{% if forloop.last == true %}false{% endif %}{%endfor%}{%else%}false{%endif%}{%else%}{%endcase%}{% else %}{%endcase%}{% if forloop.last == true %}{%else%},{% endif %}{% endfor %}{%endcapture%}{% endif %}{%- endfor -%}
{% if template.name == 'product'%}
{% capture productInCollects %}{"product_id": {{ product.id | josn }},"product_handle": {{ product.handle | json }},"collection_ids": [{% for collection in product.collections %}{% if collection != blank %}{{ collection.id | json }}{%if forloop.last == false %},{%endif%}{% endif %}{% endfor %}]}{%if forloop.last == false %},{%endif%}{% endcapture %}
{% elsif template.name == 'search'%}
{% paginate search.results by products_per_page %}{% capture productInCollects %}{% for product in search.results %}{"product_id": {{ product.id | josn }},"product_handle": {{ product.handle | json }},"collection_ids": [{% for collection in product.collections %}{% if collection != blank %}{{ collection.id | json }}{%if forloop.last == false %},{%endif%}{% endif %}{% endfor %}]}{%if forloop.last == false %},{%endif%}{% endfor %}{% endcapture %}{% endpaginate %}
{% else %}
{% paginate collection.products by products_per_page %}{% capture productInCollects %}{% for product in collection.products %}{"product_id": {{ product.id | josn }},"product_handle": {{ product.handle | json }},"collection_ids": [{% for collection in product.collections %}{% if collection != blank %}{{ collection.id | json }}{%if forloop.last == false %},{%endif%}{% endif %}{% endfor %}]}{%if forloop.last == false %},{%endif%}{% endfor %}{% endcapture %}{% endpaginate %}
{% endif %}

{% if general_settings != blank %}
<script>
    WholesaleAIO.debug = true;
    WholesaleAIO.version = "{{waio_version}}";
    WholesaleAIO.last_updated = "{{last_updated}}";
    WholesaleAIO.template = "{{ template.name }}";
    window.product_qb_applied = false;
    window.collection_id = {{ collection.id | json }};
    WholesaleAIO.signupForm = {{shop.metafields.waioForms.waio-forms-key | json }} || {};
    WholesaleAIO.netTerms = {{shop.metafields.waioNetOrders.waio-net-term-order | json }} || {};
    window.wsaioPreviewMode = true;
    WholesaleAIO.init = function($){
        if (!Array.prototype.findIndex) {
            Object.defineProperty(Array.prototype, 'findIndex', {
                value: function(predicate) {
                // 1. Let O be ? ToObject(this value).
                if (this == null) {
                    throw new TypeError('"this" is null or not defined');
                }
                var o = Object(this);
                // 2. Let len be ? ToLength(? Get(O, "length")).
                var len = o.length >>> 0;
                // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                if (typeof predicate !== 'function') {
                    throw new TypeError('predicate must be a function');
                }
                // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                var thisArg = arguments[1];
                // 5. Let k be 0.
                var k = 0;
                // 6. Repeat, while k < len
                while (k < len) {
                    // a. Let Pk be ! ToString(k).
                    // b. Let kValue be ? Get(O, Pk).
                    // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                    // d. If testResult is true, return k.
                    var kValue = o[k];
                    if (predicate.call(thisArg, kValue, k, o)) {
                    return k;
                    }
                    // e. Increase k by 1.
                    k++;
                }
                // 7. Return -1.
                return -1;
                },
                configurable: true,
                writable: true
            });
        }
        if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function(searchElement, fromIndex) {
                "use strict";
                var k;

                // 1. Let o be the result of calling ToObject passing
                //    the this value as the argument.
                if (this == null) {
                throw new TypeError('"this" is null or not defined');
                }

                var o = Object(this);

                // 2. Let lenValue be the result of calling the Get
                //    internal method of o with the argument "length".
                // 3. Let len be ToUint32(lenValue).
                var len = o.length >>> 0;

                // 4. If len is 0, return -1.
                if (len === 0) {
                return -1;
                }

                // 5. If argument fromIndex was passed let n be
                //    ToInteger(fromIndex); else let n be 0.
                var n = fromIndex | 0;

                // 6. If n >= len, return -1.
                if (n >= len) {
                return -1;
                }

                // 7. If n >= 0, then Let k be n.
                // 8. Else, n<0, Let k be len - abs(n).
                //    If k is less than 0, then let k be 0.
                k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

                // 9. Repeat, while k < len
                for (; k < len; k++) {
                // a. Let Pk be ToString(k).
                //   This is implicit for LHS operands of the in operator
                // b. Let kPresent be the result of calling the
                //    HasProperty internal method of o with argument Pk.
                //   This step can be combined with c
                // c. If kPresent is true, then
                //    i.  Let elementK be the result of calling the Get
                //        internal method of o with the argument ToString(k).
                //   ii.  Let same be the result of applying the
                //        Strict Equality Comparison Algorithm to
                //        searchElement and elementK.
                //  iii.  If same is true, return k.
                if (k in o && o[k] === searchElement)
                    return k;
                }
                return -1;
            };
        }

        if (!Array.prototype.find) {
            Object.defineProperty(Array.prototype, 'find', {
                value: function(predicate) {
                // 1. Let O be ? ToObject(this value).
                if (this == null) {
                    throw TypeError('"this" is null or not defined');
                }
                var o = Object(this);
                // 2. Let len be ? ToLength(? Get(O, "length")).
                var len = o.length >>> 0;
                // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                if (typeof predicate !== 'function') {
                    throw TypeError('predicate must be a function');
                }
                // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                var thisArg = arguments[1];
                // 5. Let k be 0.
                var k = 0;
                // 6. Repeat, while k < len
                while (k < len) {
                    // a. Let Pk be ! ToString(k).
                    // b. Let kValue be ? Get(O, Pk).
                    // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                    // d. If testResult is true, return kValue.
                    var kValue = o[k];
                    if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                    }
                    // e. Increase k by 1.
                    k++;
                }
                // 7. Return undefined.
                return undefined;
                },
                configurable: true,
                writable: true
            });
        }

        function setCookie(a,c,b){var d=new Date;d.setTime(d.getTime()+6E4*b);b="expires="+d.toUTCString();document.cookie=a+"="+c+";"+b+";path=/"}function getCookie(a){a+="=";for(var c=document.cookie.split(";"),b=0;b<c.length;b++){for(var d=c[b];" "==d.charAt(0);)d=d.substring(1);if(0==d.indexOf(a))return d.substring(a.length,d.length)}return""}function deleteCookie(a){document.cookie=a+"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";return null}function checkCookie(){return""!=getCookie("draftpreview")?!0:!1}function getPByName(a,c){c||(c=window.location.href);a=a.replace(/[\[\]]/g,"\$&");var b=(new RegExp("[?&]"+a+"(=([^&#]*)|&|#|$)")).exec(c);return b?b[2]?decodeURIComponent(b[2].replace(/\+/g," ")):"":null}(function(){var a=getPByName("draftpreview");null!==a&&""!==a&&setCookie("draftpreview","1",15)})();WholesaleAIO.previewMode=function(a,c){a&&setCookie("draftpreview","1",15);c&&deleteCookie("draftpreview");var b=checkCookie();b?log("Preview mode is ON"):log("Live mode is ON");return b};
        // Some important variables
        window.wsaioClosePreview = function(){
            removeQueryString("draftpreview", getParameterByName("draftpreview")[0])
            WholesaleAIO.previewMode(false, true);
            window.location.reload(true);
        }
        if(WholesaleAIO.previewMode()){
            var previewBar = '<div class="wholesaleAllInOnePreview" style="background-color: white;display: inline-block;width: 100%;padding: 17px 0px;box-shadow: rgba(0, 0, 0, 0.2) 0px -1px 3px;overflow: hidden;position: fixed;bottom: 0;left: 0;right: 0;z-index: 3147483648;opacity: 0.9;"><div style="float:left;display:inline-block;padding-left:20px"><p style="margin: 0px;color:black"><span>Wholesale All In One Preview:</span><b> Draft rules are visible in this preview but not visible to live customers.</b></p></div><div style="float:right;display:inline-block;padding-right: 23px;"><span style="background-color: transparent;border: 0px;color:#007ace;cursor: pointer;" onclick="wsaioClosePreview();">Close Preview</span></div></div>'
            if($(".wholesaleAllInOnePreview").length==0){
                $("body").append(previewBar)
            }
        }
        var app_url = "https://wholesales.digitalcoo.com";
        var tem_moc = {{shop.metafields.waioMOC | json }};
        var w_original_total_price = {{cart.items_subtotal_price | json}};
        var w_total_weight = {{cart.total_weight | json}};
        var w_item_count = {{cart.item_count | json}};
        var w_weight_with_unit = {{ cart.total_weight | weight_with_unit | json}};
        var currency = {{ shop.currency | json }};
        var shopCurrency = {{ shop.currency | json }};
        var is_loggedIn = {% if customer %}true{%else%}false{% endif %};
        var currency_format = {{ shop.money_format | json }};
        var currency_format_without_demical = currency_format.replace('amount', 'amount_no_decimals');
        window.current_product = {{ product | json }} || window.current_product || {};
        var current_product_in_collections = {{ product.collections | json }} || [];
        var global_counter = 0;//for schedule clock
        var products_with_collections = {{product_json}};
        var shop = {{shop.domain | json }};
        var shop_domain = {{shop.permanent_domain | json }};
        var shopDomain = {{shop.domain | json }};
        var customer_id  = {{ customer.id | json }};
        var customerId = {{ customer.id | json }};
        var customerTags = {{ customer.tags | json }} || [];
        var customer_tags = {{ customer.tags | json }} || [];
        var homePageCollection = {{collections.frontpage | json }};
        var coupon_code_id = "ca54e877f83b5bf5882aeb63f2ceb5b16c"; //pre defined id
        var coupon_code_entitled_ids = {variants:[],products:[]};
        var coupon_code_applied = "";
        var cart = {{ cart | json }};
        var waio_discount_applied = [];
        var collection_handle = '{{ collection.handle }}';
        var discountRuleTracking = [];
        var qb_rules = [], dg_rules = [], settings = [];
        try{
            qb_rules = JSON.parse('[{{wholesaleQB}}]');
            dg_rules = JSON.parse('[{{discountRule}}]');
            settings = JSON.parse('[{{general_settings}}]');
        }catch(e){log("JSON Parsing error.",e,"error")}
        var app_enabled = settings[0]?settings[0].settings.enable_app?true:false:false;
        window.selected_variant_id = '{{selected_variant}}';
        settings[0].settings.app_enabled = settings[0].settings.enable_app;
        var waio_settings = settings[0]?settings[0].settings:{};
        WholesaleAIO.settings = waio_settings;
        if(typeof dg_rules !== "undefined" && dg_rules.length > 0){
            dg_rules.forEach(function(_d,_i){
                if(_d.status === "published"){
                    wsaioPreviewMode = false;
                }
                _d.customers_group = dg_rules[_i].customers_group.tag_base_customers? "tagged_customer":dg_rules[_i].customers_group.customers
            });
            // sorting array to highest priority
            var sortOrder = ["tagged_customer", "only_logged_in_customers", "all"];
            var sortOrder2 =  ["specific_variants", "specific_products", "specific_collections","entire_store"];
            var temp = [];
            for(var iter = 0; iter < sortOrder2.length; iter++){
                var _d = sortOrder2[iter];
                var temp1 = dg_rules.filter(function(x){return x.applies_to === _d});
                temp1.sort(function(a,b){
                    var compA = $.inArray(a.customers_group, sortOrder);
                    var compB = $.inArray(b.customers_group, sortOrder);
                    return (compA < compB) ? -1 : (compA > compB) ? 1 : 0;
                });
                temp1.forEach(function(_f,_j){
                    temp.push(_f);
                });
            }
            dg_rules = temp; 
        }
        if(typeof qb_rules !== "undefined" && qb_rules.length > 0){
            qb_rules.forEach(function(a,b){
                if(a.status === "published"){
                    wsaioPreviewMode = false;
                }
            });
            var sortOrder = ["tag_based", "only_logged_in", "all"];
            var sortOrder2 =  ["selected_variants", "selected_products","selected_collections","entire_store"];
            var temp = [];
            for(var iter = 0; iter < sortOrder2.length; iter++){
                var _d = sortOrder2[iter];
                var temp1 = qb_rules.filter(function(x){return x.qb_applies_to === _d});
                temp1.sort(function(a,b){
                    var compA = $.inArray(a.customers_group, sortOrder);
                    var compB = $.inArray(b.customers_group, sortOrder);
                    return (compA < compB) ? -1 : (compA > compB) ? 1 : 0;
                });
                temp1.forEach(function(_f,_j){
                    temp.push(_f);
                });
            }
            qb_rules = temp; 
        }
        var tempWaioQC = {{shop.metafields.waioQC | json }};
        var waioQCTemp = [];
        waioQCTemp = waioQCTemp.concat(Object.keys(tempWaioQC).map(function(a){return tempWaioQC[a]}));
        WholesaleAIO.quantity_controls = [];
        if(typeof waioQCTemp !== "undefined" && waioQCTemp.length > 0){
            var sortOrder = ["tag_based", "logged_in", "all"];
            var sortOrder2 =  ["variants", "products","collections","entire_store"];
            var temp = [];
            for(var iter = 0; iter < sortOrder2.length; iter++){
                var _d = sortOrder2[iter];
                var temp1 = waioQCTemp.filter(function(x){return x.applies_to === _d});
                temp1.sort(function(a,b){
                    var compA = $.inArray(a.customer_group, sortOrder);
                    var compB = $.inArray(b.customer_group, sortOrder);
                    return (compA < compB) ? -1 : (compA > compB) ? 1 : 0;
                });
                temp1.forEach(function(_f,_j){
                    temp.push(_f);
                });
            }
            WholesaleAIO.quantity_controls = temp; 
        }
        
        // If there is preview move
        if(WholesaleAIO.previewMode()){
            WholesaleAIO.quantity_breaks = qb_rules.filter(function(x) { return (x.status === "published") || (x.status === "draft") });
            WholesaleAIO.discount_groups = dg_rules.filter(function(x) {return (x.status === "published") || (x.status === "draft") });
            WholesaleAIO.dg = dg_rules.filter(function(x) {return (x.status === "published") || (x.status === "draft") });
            WholesaleAIO.qb = qb_rules.filter(function(x) {return (x.status === "published") || (x.status === "draft") });
        }
        else{
            WholesaleAIO.quantity_breaks = qb_rules.filter(function(x) { return x.status === "published" });
            WholesaleAIO.discount_groups = dg_rules.filter(function(x) {return x.status === "published" });
            WholesaleAIO.dg = dg_rules.filter(function(x) {return x.status === "published" });
            WholesaleAIO.qb = qb_rules.filter(function(x) {return x.status === "published" });
        }
        if(0===qb_rules.length && 0===dg_rules.length) { wsaioPreviewMode = false; window.disableWSDiscount = true; }
        if(wsaioPreviewMode){
          if(WholesaleAIO.previewMode()){
            log("WS Checkout enabled.");
            window.disableWSDiscount = false;
          }
          else{
            window.disableWSDiscount = true;
            try{
                WholesaleAIO.settings.enable_additional_coupon_code=false;
            }catch(e){log(e)}
          }
        }
        if(window.disableWSDiscount===false){
          log("WS Checkout enabled.");
        }
        else{
            log("WS Checkout was","disabled", "warning");
        }
        function removeQueryString(a,d){var b=document.location.href,c=location.search;""!=a?(d=encodeURIComponent(d),a=a+"="+d,"-1"!=c.indexOf("?"+a+"&")?b=b.replace("?"+a+"&","?"):"-1"!=c.indexOf("&"+a+"&")?b=b.replace("&"+a+"&","&"):"-1"!=c.indexOf("?"+a)?b=b.replace("?"+a,""):"-1"!=c.indexOf("&"+a)&&(b=b.replace("&"+a,""))):(c=location.search,b=b.replace(c,""));history.pushState({state:1,rand:Math.random()},"",b)};
        function getParameterByName(e){for(var b=[],c=window.location.search.substring(1).split("&"),a=0;a<c.length;a++){var d=c[a].split("=");d[0]==e&&b.push(decodeURIComponent(d[1]))}return b};
        var cart_total_price_html = '<span class="wholesale-cart-total"><del class="wholesale-crossout-price">[[strikethrough_price]]</del>[[wholesale_price]]</span>';
        var cart_single_price_html = '<span class="wholesale-item-price"><del class="wholesale-crossout-price">[[strikethrough_price]]</del>[[wholesale_price]]</span>';
        var cart_subtotal_price_html = '<span class="wholesale-subtotal"><del class="wholesale-crossout-price">[[strikethrough_price]]</del>[[wholesale_price]]</span>';
        var product_price_html = '<span class="wholesale-item-price"><del class="wholesale-crossout-price">[[strikethrough_price]]</del>[[wholesale_price]]</span>';
        var product_price_coll_html = '<span class="wholesale-item-price"><del class="wholesale-crossout-price">[[strikethrough_price]]</del>[[wholesale_price]]</span>';
        var preDiscount_cart_total_price_html = '[[wholesale_price]]';
        var preDiscount_cart_single_price_html = '[[wholesale_price]]';
        var preDiscount_cart_subtotal_price_html = '[[wholesale_price]]';
        var preDiscount_product_price_html = '[[wholesale_price]]';
        var preDiscount_product_price_coll_html = '[[wholesale_price]]';
        price_design_config = waio_settings.price_design_config ? waio_settings.price_design_config[0]?waio_settings.price_design_config[0]:{}:{};
        cart_total_price_html = price_design_config.cart_total_price_html || cart_total_price_html;
        cart_single_price_html = price_design_config.cart_single_price_html || cart_single_price_html;
        cart_subtotal_price_html = price_design_config.cart_subtotal_price_html || cart_subtotal_price_html;
        product_price_html = price_design_config.product_price_html || product_price_html;
        product_price_coll_html = price_design_config.product_price_coll_html || product_price_coll_html;
        preDiscount_cart_total_price_html = price_design_config.preDiscount_cart_total_price_html || preDiscount_cart_total_price_html;
        preDiscount_cart_single_price_html = price_design_config.preDiscount_cart_single_price_html || preDiscount_cart_single_price_html;
        preDiscount_cart_subtotal_price_html = price_design_config.preDiscount_cart_subtotal_price_html || preDiscount_cart_subtotal_price_html;
        preDiscount_product_price_html = price_design_config.preDiscount_product_price_html || preDiscount_product_price_html;
        preDiscount_product_price_coll_html = price_design_config.preDiscount_product_price_coll_html || preDiscount_product_price_coll_html;

        waio_settings&&waio_settings.selectors&&0<waio_settings.selectors.length&&(waioSelectors=waio_settings.selectors[0]);waio_settings&&waio_settings.translations&&0<waio_settings.translations.length&&(waioTranslations=waio_settings.translations[0]);
        var ppDiscountTEXT={text:{prefix:waioTranslations.qualifies_message_prefix,suffix:waioTranslations.qualifies_message_suffix},style:{ppdt_additionalStyle:!1}};
        var productInCollects = [{{productInCollects}}];
        WholesaleAIO.productInCollects = productInCollects;
        var general_settings={all:waio_settings,app_enabled:waio_settings.app_enabled,compare_at_price:waio_settings.compare_at_price,discount_method:waio_settings.discount_method,price_design_config:waio_settings.price_design_config?waio_settings.price_design_config[0]?waio_settings.price_design_config[0]:{}:{},pp_discount_text:waio_settings.pp_discount_text[0]?waio_settings.pp_discount_text[0]:ppDiscountTEXT,sale_clock:waio_settings.sale_clock,table_widget_style:waio_settings.table_widget_style[0],tableStyle:function(){return this.table_widget_style&&this.table_widget_style.default_table_style?"background:"+this.table_widget_style.table_hex_bg_clr+" !important;color:"+this.table_widget_style.table_hex_fg_clr+" !important;":""},tableBorderColor:function(){return this.table_widget_style&&this.table_widget_style.default_table_style?"border-color:"+this.table_widget_style.table_border_hex_clr+" !important;text-align:"+this.table_widget_style.table_text_align+" !important;":""},tableStyleThead:function(){return this.table_widget_style&&this.table_widget_style.default_table_style?"background:"+this.table_widget_style.thead_hex_bg_clr+" !important;color:"+this.table_widget_style.thead_hex_fg_clr+" !important;text-align:"+this.table_widget_style.table_text_align+" !important;":""},tableTemplateClass:function(){return this.table_widget_style&&this.table_widget_style.default_table_style?this.table_widget_style.table_template_class:""},ppDiscountStyle:function(){if(this.pp_discount_text&&this.pp_discount_text.style.ppdt_additionalStyle){var a=this.pp_discount_text.style;return"font-size:"+a.ppdtFontSize+"px !important;text-align:"+a.ppdtTextAlign+" !important;background-color:"+a.ppdt_hex_bg_color+" !important;color:"+a.ppdt_hex_fg_color+"!important;"}return""}};
        waioMOC.rules=[];waioMOC.rules=waioMOC.rules.concat(Object.keys(tem_moc).map(function(a){return tem_moc[a]}));waioMOC.cart={original_total_price:w_original_total_price,total_weight:w_total_weight,item_count:w_item_count,weight_with_unit:w_weight_with_unit};waioMOC.oc={};
        WholesaleAIO.disable_checkout=!1;
        var win_curancy = $('.currency-selector__input-wrapper.select-group [name="currency"]').val()
        if(win_curancy == 'USD'){
        win_curancy = '';
        }
        function log(a,b,c){if(WholesaleAIO.debug)if("undefined"!==typeof c)switch(c){case "warning":console.warn(a,b);break;case "error":console.error(a,b);break;case "info":console.info(a,b);break;default:console.log(a,b)}else console.log(a,b)};
        WholesaleAIO.priceFormat=function(a){a=a.toString();-1<a.indexOf(".")?2<a.split(".")[1].length?a=a.substr(0,a.indexOf(".")+3):2>a.split(".")[1].length&&(a+="0"):a=Number(a).toFixed(2);a=a.replace(".","");return Number(a)};
        WholesaleAIO.formatMoney=function(a,g){function b(a,c,b,d){b=b||",";d=d||".";if(isNaN(a)||null===a)return 0;a=(a/100).toFixed(c);a=a.split(".");return a[0].replace(/(d)(?=(ddd)+(?!d))/g,"$1"+b)+(a[1]?d+a[1]:"")}"string"===typeof a&&(a=a.replace(".",""));var c="",e=/\{\{\s*(\w+)\s*\}\}/,f=g||currency_format||"{%raw%}${{amount}} {%endraw%}";switch(f.match(e)[1]){case "amount":c=b(a,2);break;case "amount_no_decimals":c=b(a,0);break;case "amount_with_comma_separator":c=b(a,2,".",",");break;case "amount_no_decimals_with_comma_separator":c=b(a,0,".",",");break;case "amount_no_decimals_with_space_separator":c=b(a,0," ");break;case "amount_with_apostrophe_separator":c=b(a,2,"'")}return f.replace(e,c)+' '+win_curancy};
        function mF(a){if(isNaN(a)||null==a)return 0;a=a.toString();if("string"==typeof a&&-1<a.indexOf("."))return 2>a.split(".")[1].length?Number(a).toFixed(2).toString():a.toString();a=(Number(a)/100).toFixed(2);return a.toString()};
        function pF(a){if(isNaN(a))return 0;a=a.toString();-1<a.indexOf(".")&&(2<a.split(".")[1].length?a=a.substr(0,a.indexOf(".")+3):2>a.split(".")[1].length&&(a+="0"),a=a.replace(".",""));return Number(a)}function decimal(a){try{return isNaN(a)||null==a?0:a.toFixed(2)}catch(b){return a}};
        String.prototype.replaceMeW=function(a,b){return this.split(a).join(b)};
        function get_est_time(callback) {
            $.ajax({
                type: "GET",
                url: app_url + "/est-time-now/v2",
                cache: !1,
                dataType: "json",
                success: function (a) {
                    if("function" === typeof callback){
                        callback(null,a);
                    }
                },
                error: function (a) {
                    if("function" === typeof callback){
                        callback(a,null);
                    }
                }
            })
        };
        function compareAndSortVD(a,b){return a.qty<b.qty?-1:a.qty>b.qty?1:0};
        function removeLocalStorage(a){sessionStorage.removeItem(a)}function setLocalStorage(a,b){sessionStorage.removeItem(a,b)}function getJsonLocalStorage(a){return sessionStorage.getItem(a)?JSON.parse(sessionStorage.getItem(a)):null};
        
        function fetch_cart(callback){
            $.ajax({
                type: 'GET',
                url: '/cart.js',
                cache: false,
                dataType: 'json',
                success: function(a){
                    cart = a;
                    try {
                        waioMOC.cart.original_total_price = a.total_price,
                        waioMOC.cart.total_weight = a.total_weight,
                        waioMOC.cart.item_count = a.item_count;
                    } catch (e) {
                        log(e)
                    }
                    if("function" === typeof callback){
                        callback(null,a);
                    }
                },
                error: function(err){
                    if("function" === typeof callback){
                        callback(err,null);
                    }
                }
            });
        }

        function wholesaleDiscountReq(data,url,callback){
            $.ajax({
                type: 'POST',
                url: url,
                cache: false,
                data: data,
                success: function(result){
                    $(waioSelectors.checkout).prop('disabled', false);
                    if("function" === typeof callback){
                        callback(null,result);
                    }
                },
                error: function(err){
                    if("function" === typeof callback){
                        callback(err, null);
                    }
                }
            });
        }
        function addBuyNowBtnClass(){
            buynow_recursion(10);
        }
        function addBuyNowBtnHTML(){
            if(window.disableWSDiscount) return false;
            $(waioSelectors.shopifyPaymentButton).html('');
            $(waioSelectors.shopifyPaymentButton).html('<button type="button" class="'+waioSelectors.buyNowClass.replace(".","")+' shopify-payment-button__button shopify-payment-button__button--unbranded">'+waioTranslations.buy_now_button+'</button>');
        }
        var buynow_recursion = function(limit){
            if(limit<=0)return;
            if($('.shopify-payment-button__button:not(.shopify-payment-button__button--hidden)').length>0)addBuyNowBtnHTML();
            else setTimeout(function(){buynow_recursion(--limit);},2000);
        }
        function getOptURLValue(a){return(new URL(window.location.href)).searchParams.get(a)};
        function change_poduct_price(a){return WholesaleAIO.formatMoney(Number(a),currency_format)};
        // START MINIMUM ORDER CONTROL
        var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.arrayIteratorImpl=function(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}};$jscomp.arrayIterator=function(a){return{next:$jscomp.arrayIteratorImpl(a)}};$jscomp.makeIterator=function(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};
        function disable_checkout(a,b,d){b=b||waioMOC.oc.message;d=d||waioSelectors.checkout;a||WholesaleAIO.disable_checkout?(a='<div class="waio-orderControl-message">'+b+"</div>",0<$(".waio-orderControl-message").length?$(".waio-orderControl-message").text(b):$(a).insertAfter(d),$(d).off(),$(d).attr("disabled","disabled"),$(d).addClass("checkout-disabled")):($(".waio-orderControl-message").html(""),$(d).removeClass("checkout-disabled"),$(d).removeAttr("disabled"),$(d).attr("name","checkout"))}
        function minOrderControl(){for(var a=[],b=0;b<waioMOC.rules.length;b++){var d=waioMOC.rules[b];"active"===d.status&&mocIsValidCustomer(d)&&a.push(d)}if(0<a.length){b={};if(1===a.length)b=a[0];else{d=a.findIndex(function(a){return"tag_based"===a.customer_group});var c=a.findIndex(function(a){return"logged_in"===a.customer_group}),e=a.findIndex(function(a){return"all"===a.customer_group});-1<d?b=a[d]:-1<c?b=a[c]:-1<e&&(b=a[e])}log(b);if("undefined"!==typeof b.rules){a=[];d=$jscomp.makeIterator(b.rules);for(c=d.next();!c.done;c=d.next())switch(c=c.value,c.column){case "cart_original_total_price":switch(c.relation){case "equal":Number(c.condition)==mF(Number(waioMOC.cart.original_total_price))?a.push("yes"):a.push("no");break;case "not_equal":Number(c.condition)!=mF(Number(waioMOC.cart.original_total_price))?a.push("yes"):a.push("no");break;case "greater_than":Number(c.condition)<mF(Number(waioMOC.cart.original_total_price))?a.push("yes"):a.push("no");break;case "less_than":Number(c.condition)>mF(Number(waioMOC.cart.original_total_price))?a.push("yes"):a.push("no");break;default:cosnole.log("invalid relation value in MOC's nested switch")}break;case "cart_item_count":switch(c.relation){case "equal":Number(c.condition)==Number(waioMOC.cart.item_count)?a.push("yes"):a.push("no");break;case "not_equal":Number(c.condition)!=Number(waioMOC.cart.item_count)?a.push("yes"):a.push("no");break;case "greater_than":Number(c.condition)<Number(waioMOC.cart.item_count)?a.push("yes"):a.push("no");break;case "less_than":Number(c.condition)>Number(waioMOC.cart.item_count)?a.push("yes"):a.push("no");break;default:cosnole.log("invalid relation value in MOC's nested switch")}break;case "cart_total_weight":switch(c.relation){case "equal":Number(c.condition)==Number(waioMOC.cart.total_weight)?a.push("yes"):a.push("no");break;case "not_equal":Number(c.condition)!=Number(waioMOC.cart.total_weight)?a.push("yes"):a.push("no");break;case "greater_than":Number(c.condition)<Number(waioMOC.cart.total_weight)?a.push("yes"):a.push("no");break;case "less_than":Number(c.condition)>Number(waioMOC.cart.total_weight)?a.push("yes"):a.push("no");break;default:cosnole.log("invalid relation value in MOC's nested switch")}break;default:cosnole.log("invalid column value in MOC's parent switch")}log(a);waioMOC.oc=b;"and"===b.rules_operator?-1<a.indexOf("no")?(WholesaleAIO.disable_checkout=!0,WholesaleAIO.checkout_message=b.message,WholesaleAllInOne.disable_checkout(!0,b.message)):(WholesaleAIO.disable_checkout=!1,WholesaleAIO.checkout_message=b.message,WholesaleAllInOne.disable_checkout(!1,b.message)):-1===a.indexOf("yes")?(WholesaleAIO.disable_checkout=!0,WholesaleAIO.checkout_message=b.message,WholesaleAllInOne.disable_checkout(!0,b.message)):(WholesaleAIO.disable_checkout=!1,WholesaleAIO.checkout_message=b.message,WholesaleAllInOne.disable_checkout(!1,b.message))}else log("Something missing in MOC")}else log("Minimum Order Control is not valid for this customer"),log("Minimum Order Control is not valid for this customer")}
        function mocIsValidCustomer(a){var b=!0;"all"!==a.customer_group?(is_loggedIn||(b=!1),"tag_based"===a.customer_group?isTagged(a.customer_tags)||(b=!1):a.except_tags&&isTagged(a.excepted_tags)&&(b=!1)):(a.except_tags&&isTagged(a.excepted_tags)&&(b=!1),a.except_logged_in&&is_loggedIn&&(b=!1));return b}
        function isTagged(a){if("undefined"===typeof a||!is_loggedIn)return!1;var b=!1,d=customer_tags.map(function(a){return a.toUpperCase()});a=a.map(function(a){return a.toUpperCase()});a=$jscomp.makeIterator(a);for(var c=a.next();!c.done;c=a.next())if(-1<d.indexOf(c.value)){b=!0;break}return b};
        function activate_order_control_from_code(a){waioMOC.cart.original_total_price=Number(a.cart_subtotal)-100*Number(a.total_discount);WholesaleAllInOne.order_control()};
        // END MINIMUM ORDER CONTROL
        // SHOPIFY BUY IT NOW BUTTON
        function shopifyBuyNow() {
            if(window.disableWSDiscount) return false;
            $(document).on("click", waioSelectors.buyNowClass, function (c) {
                c.preventDefault();
                c.stopImmediatePropagation();
                $(this).prop("disabled", !0);
                c = $(this).parents("form");
                var h = c.find('[name="id"]').attr("data-handle"),
                    f = c.find('[name="id"]').val(),
                    d = c.find('[name="quantity"]').val();
                void 0 === d && (d = 1);
                $.getJSON("/products/" + h + ".js", function (b) {
                    if (b) {
                        var e = b.variants.findIndex(function (a) {
                                return a.id == f
                            }),
                            a = {}; - 1 < e && (a = b.variants[e]);
                        if (a.available) {
                            e = Number(a.price) * Number(d);
                            b = {
                                attributes: {},
                                cart_level_discount_applications: [],
                                currency: shopCurrency,
                                item_count: d,
                                items: [{
                                    discounted_price: a.price,
                                    discounts: [],
                                    featured_image: a.featured_image,
                                    final_line_price: e,
                                    final_price: a.price,
                                    gift_card: !1,
                                    grams: a.weight,
                                    handle: b.handle,
                                    id: a.id,
                                    image: a.featured_image,
                                    key: "11309472350255:a5c7b76a76a9b8da2aa5dceab2c6b7ab",
                                    line_level_discount_allocations: [],
                                    line_price: e,
                                    options_with_values: [],
                                    original_line_price: e,
                                    original_price: a.price,
                                    price: a.price,
                                    product_description: "",
                                    product_has_only_default_variant: !1,
                                    product_id: b.id,
                                    product_title: b.title,
                                    product_type: b.type,
                                    properties: null,
                                    quantity: d,
                                    requires_shipping: a.requires_shipping,
                                    sku: a.sku,
                                    taxable: a.taxable,
                                    title: b.title + " - " + a.title,
                                    total_discount: 0,
                                    url: "/products/" + b.handle + "?variant=" + a.id,
                                    variant_id: a.id,
                                    variant_options: a.options,
                                    variant_title: a.title,
                                    vendor: b.vendor
                                }],
                                items_subtotal_price: e,
                                note: null,
                                original_total_price: e,
                                requires_shipping: a.requires_shipping,
                                token: "3cbccfbccb5ed48c66e4ced34048082d",
                                total_discount: 0,
                                total_price: e,
                                total_weight: Number(a.weight) * Number(d)
                            };
                            log(b);
                            var c = [];
                            if ("cart" !== WholesaleAIO.template && "product" !== WholesaleAIO.template && WholesaleAIO.productInCollects) {
                                var g = cart.items[0] || {};
                                a = WholesaleAIO.productInCollects.find(function (a) {
                                    return a.product_id == g.product_id
                                });
                                "undefined" !== typeof a && a.collection_ids.forEach(function (a, b) {
                                    c.push({
                                        product_id: g.product_id,
                                        collection_id: a
                                    })
                                })
                            }
                            current_product_in_collections && current_product_in_collections.forEach(function (a, b) {
                                c.push({
                                    product_id: current_product.id,
                                    collection_id: a.id
                                })
                            });
                            c = products_with_collections.concat(c);
                            general_settings.app_enabled ?
                            get_buynow_discount({
                                preview_mode: WholesaleAIO.previewMode(),
                                note_attributes: [],
                                shipping_address: {},
                                billing_address: {},
                                order_tags: "",
                                order_note: "",
                                cart: b,
                                shop: shop_domain,
                                shopDomain: shopDomain,
                                customer_id: customer_id,
                                coupon_code_id: coupon_code_id,
                                coupon_code_entitled_ids: coupon_code_entitled_ids,
                                customer_tags: customer_tags,
                                products_with_collections: c,
                                shopifyCurrencies: getShopifyCurrencies(),
                                prev_price_rule_info: getJSONfromLocalStorage("price_rule_info"),
                                prev_draft_order_info: getJSONfromLocalStorage("draft_order_info")
                            }, function(e,a){
                                if(a){
                                    try {
                                        1 === a.status ? ("undefined" !== typeof a.price_rule_info ? localStorage.setItem("price_rule_info", JSON.stringify(a.price_rule_info)) : "undefined" !== typeof a.draft_order_info && localStorage.setItem("draft_order_info", JSON.stringify(a.draft_order_info)), a.checkout_url ? redirectToURL(a.checkout_url) : redirectToURL("https://" + shop + "/cart/" + f + ":" + d)) : redirectToURL("https://" + shop + "/cart/" + f + ":" + d)
                                    } catch (k) {
                                        log(k), redirectToURL("https://" + shop + "/cart/" + f + ":" + d)
                                    }
                                }else if(e){
                                    log(e);
                                    redirectToURL("https://" + shop + "/cart/" + f + ":" + d)
                                }
                            }) : (log("Wholesale all in one is disabled"), redirectToURL("https://" + shop + "/cart/" + f + ":" + d))
                        } else log("This item is not available for purchase"), alert("This item is not available for purchase")
                    } else log("Product object error from shopify end!"), log(b), window.location.href = window.location.origin + "/cart/" + f + ":" + d
                })
            })
        };
        function get_buynow_discount(data, callback){
            $.ajax({
                type: 'POST', url: app_url+'/api/223/buynow',
                cache: false, data: data,
                success: function(result){
                    if("function" === typeof callback){
                        callback(null, result);
                    }
                },
                error: function(err){
                    if("function" === typeof callback){
                        callback(err,null);
                    }
                }
            });
        }
        addBuyNowBtnClass();shopifyBuyNow();
        // END SHOPIFY BUY IT NOW BUTTON
        WholesaleAIO.priceFloat=function(a){if(isNaN(a)||!a)return 0;"number"==typeof a&&(a=a.toString());if("string"==typeof a&&-1<a.indexOf(".")){a=a.substring(0,a.indexOf(".")+3);try{a=Number(a).toFixed(2)}catch(b){log(b)}}else try{a=Number(a).toFixed(2)}catch(b){log(b)}return a.toString()};
		WholesaleAIO.mF=function(a){if(isNaN(a)||!a)return 0;a=(a/100).toFixed(2);"number"==typeof a&&(a=a.toString());"string"==typeof a&&-1<a.indexOf(".")&&(2>a.split(".")[1].length?a+="00":2<a.split(".")[1].length&&(a=a.substring(0,a.indexOf(".")+3)));return a};
        WholesaleAllInOne.order_control = function(){minOrderControl();};
        WholesaleAllInOne.disable_checkout = function(c,m,el){disable_checkout(c,m,el);};
        function getJSONfromLocalStorage(a){return null!==localStorage.getItem(a)?JSON.parse(localStorage.getItem(a)):{}};
        // Cart template
        // Wholesale signup form function
        window.signup_form_try_counter=0;WholesaleAllInOne.appendSignUpForm=function(a){signup_form_try_counter++;0<$(".wholesale-all-in-one-registration-form").length?($(".wholesale-all-in-one-registration-form").html(WholesaleAIO.signupForm.form_html),log("wholesale signup form was appended!")):2E3>500*signup_form_try_counter?(log("Please wait for "+500*signup_form_try_counter+" second. We are trying to append wholesale signup form"),setTimeout(function(){WholesaleAllInOne.appendSignUpForm()},500*signup_form_try_counter)):log("Try ended. Wholesale signup form div was not found.")};WholesaleAllInOne.appendSignUpForm();
        // end wholesale signup form function

        function getShopifyCurrencies(){ 
            if("undefined" !== typeof window.Currency){
              console.warn('getShopifyCurrencies', {
                    rates:window.Currency.rates,
                    selectedCurrency:$('#CurrencySelector').val(),
                    storeCurrency:{{ shop.currency | json }},
                });
                return {
                    rates:window.Currency.rates,
                    selectedCurrency:$('#CurrencySelector').val(),
                    storeCurrency:{{ shop.currency | json }},
                };
            }
            else{
                log("WAIO ERROR","Currency converter not working for this store only. Error window.Currency is not defined.","error");
                return {
                    rates:{},
                    selectedCurrency:$('[name="currencies"],[id="currencies"]').val(),
                    storeCurrency:{{ shop.currency | json }},
                };
            }
        }

        WholesaleAIO.shopifyCurrencies = function(){
            return getShopifyCurrencies();
        }

        WholesaleAIO.currencyConvert = function(amount,from,to){
            return window.Currency.convert(amount,from,to);
        }

        WholesaleAIO.savedAmount = function (price, discont, type) {
            if (price === null || discont === null || type === null || isNaN(price) || isNaN(discont)) return null;
            var in_percent = 0;
            var fixed_amount = 0;
            switch (type) {
                case "percentage":
                    in_percent = Math.round(discont);
                    fixed_amount = Number(price) * Number(discont) / 100;
                break;
                case "price_discount":
                    in_percent = parseFloat(discont) / parseFloat(price);
                in_percent = parseFloat(in_percent) * parseFloat(100);
                var actual_price = parseFloat(discont) + parseFloat(price);
                var percnt = parseFloat(price) / parseFloat(actual_price);
                percnt = parseFloat(percnt) * parseFloat(100);
                percnt = parseFloat(100) - parseFloat(percnt)
                percnt = Number(percnt).toFixed(2);
                in_percent= Math.round(percnt)
                console.warn(in_percent)
                    fixed_amount = discont;
//                     if(Number(price) < Number(discont)){
//                         fixed_amount = price;
//                         in_percent=100;
//                     }
                break;
                case "fixed_price":
                    fixed_amount = Number(price) - Number(discont);
                    in_percent = Math.round(fixed_amount / Number(price) * 100);
                    if(Number(price) < Number(discont) || Number(discont) === Number(price)){
                        fixed_amount = 0;
                        in_percent = 0;
                    }
                    else if (Number(discont) === 0){
                        fixed_amount = price;
                        in_percent = 100; 
                    }
                break;
                default:
                return {
                    error: "Discount value is not valid. Valid values are percentage,price_discount,fixed_price"
                }
            }
            if(Number(in_percent) < 0){
                in_percent = 0;
            }
            else if(Number(in_percent) > 100){
                in_percent = 100;
            }
            return {
                in_percent: in_percent+"%",
                fixed_amount: Number(Number(fixed_amount).toFixed(2))
            }
        }

        WholesaleAIO.savedAmount2 = function (original_price, discount_price) {
            if (original_price === null || discount_price === null || isNaN(original_price) || isNaN(discount_price)) return null;
            var in_percent = 0;
            var fixed_amount = 0;
            fixed_amount=original_price-discount_price;
            in_percent=100-(discount_price/original_price)*100;
            return {
                in_percent: Math.round(in_percent)+"%",
                fixed_amount: Number(Number(fixed_amount).toFixed(2))
            }
        }

        function wholesaleDiscount__cart(){
            fetch_cart(function (error, cart) {
                if(error){
                    log(error);
                    log("WAIO Warning", "Error occure at checkout button while fetching cart object","warning");
                    redirectToURL("https://"+shop+"/checkout");
                }
                var p_with_c = [];
                if(WholesaleAIO.template !== 'cart' && WholesaleAIO.template !== 'product'){
                    if(WholesaleAIO.productInCollects){
                        try{
                            var last_item = cart.items[0] || {};
                            var indexOfPC = WholesaleAIO.productInCollects.findIndex(function(x){return x.product_id==last_item.product_id});
                            var pc = -1<indexOfPC?WholesaleAIO.productInCollects[indexOfPC]:undefined;
                            if(typeof pc !== "undefined"){
                                pc.collection_ids.forEach(function(collection, i){
                                    p_with_c.push({
                                        product_id: last_item.product_id,
                                        collection_id:collection
                                    });
                                });
                            }
                        }catch(e){log(e)}
                    }
                }
                if(current_product_in_collections){
                    current_product_in_collections.forEach(function(collection, i){
                        p_with_c.push({
                            product_id: current_product.id,
                            collection_id:collection.id
                        });
                    });
                }
                p_with_c = products_with_collections.concat(p_with_c);
                if(cart.item_count > 0){
                    if(general_settings.app_enabled){
                        var waioReqURL = app_url+"/api/223/checkout";
                        wholesaleDiscountReq({
                            preview_mode: WholesaleAIO.previewMode(),
                            note_attributes: [],
                            shipping_address: {},
                            billing_address: {},
                            force_draft_order: false,
                            cc_max_amount: false,
                            cart_tags: coupon_code_applied,
                            order_note: $("[name=note]").val(),
                            cart: cart,
                            shop: shop_domain,
                            shopDomain: shopDomain,
                            customer_id: customer_id,
                            coupon_code_id: coupon_code_id,
                            coupon_code_entitled_ids: coupon_code_entitled_ids,
                            customer_tags: customer_tags,
                            products_with_collections: p_with_c,
                            shopifyCurrencies: getShopifyCurrencies(),
                            prev_price_rule_info: getJSONfromLocalStorage("price_rule_info"),
                            prev_draft_order_info: getJSONfromLocalStorage("draft_order_info")
                        },waioReqURL,function(e, response){
                            if(e){
                                log(e);
                                log("WAIO Warning", "Error occure at checkout button","warning");
                                redirectToURL("https://"+shop+"/checkout");
                            }
                            else if(response){
                                if(response.status === 1){
                                    localStorage.setItem("discountRule-tracking", localStorage.getItem("discount-tracking"));
                                    if("undefined" !== typeof response.price_rule_info){
                                        localStorage.setItem("price_rule_info",JSON.stringify(response.price_rule_info));
                                    }
                                    else if("undefined" !== typeof response.draft_order_info){
                                        localStorage.setItem("draft_order_info",JSON.stringify(response.draft_order_info))
                                    }
                                    if(response.checkout_url){
                                        redirectToURL(response.checkout_url);
                                    }
                                    else{
                                        redirectToURL("https://"+shop+"/checkout");
                                    }
                                }
                                else{
                                    redirectToURL("https://"+shop+"/checkout");
                                }
                            }
                        });
                    }
                    else{
                        log("WAIO LOG!","Wholesale all in one is disabled","warning");
                        redirectToURL("https://"+shop+"/checkout");
                    }
                }
                else{
                    log("WAIO LOG!","No items found in the cart!");
                    redirectToURL("https://"+shop+"/checkout");
                }
            });
        }

        function redirectToURL(url){
            if(url){
                window.location.href = url;
            }
            else{
                log("WAIO Warning", "Redirect URL was not found!", "warning")
            }
        }

        function initCheckout(config){
            if(window.disableWSDiscount && !(WholesaleAIO.settings.enable_additional_coupon_code)){ return false; }
            $(document).on('click',waioSelectors.checkout,function(e) {
              var nte = $('.subtotal textarea[name="note"]').val()
              jQuery.post('/cart/update.js', {note: nte});
                e.preventDefault();
                e.stopImmediatePropagation();
                e.stopPropagation();
                $(this).attr("disabled");
                $(this).find('[name="discount"], [name="clear_discount"]').remove();
                $(this).parents('form').find('[name="discount"], [name="clear_discount"]').remove();
                localStorage.setItem("discountRule-tracking", localStorage.getItem("discount-tracking"));
                log("WAIO LOG!", "waio checkout is working.");
                wholesaleDiscount__cart();
            });
        }

        function executeCheckout(e){
            if(window.disableWSDiscount && !(WholesaleAIO.settings.enable_additional_coupon_code)){ return true; }
            else{
              var nte = $('.subtotal textarea[name="note"]').val()
              jQuery.post('/cart/update.js', {note: nte});
                e.preventDefault();
                e.stopImmediatePropagation();
                e.stopPropagation();
                $(this).attr("disabled");
                $(this).find('[name="discount"], [name="clear_discount"]').remove();
                $(this).parents('form').find('[name="discount"], [name="clear_discount"]').remove();
                localStorage.setItem("discountRule-tracking", localStorage.getItem("discount-tracking"));
                log("WAIO LOG!", "waio checkout is working.");
                wholesaleDiscount__cart();
            }
        }
        
        function preDiscount__cart(){
            if(window.disableWSDiscount) { return false; }
            fetch_cart(function (error, cart) {
                if(error){
                    log(error);
                }
                var p_with_c = [];
                if(WholesaleAIO.template !== 'cart' && WholesaleAIO.template !== 'product'){
                    if(WholesaleAIO.productInCollects){
                        try{
                            var last_item = cart.items[0] || {};
                            var indexOfPC = WholesaleAIO.productInCollects.findIndex(function(x){return x.product_id==last_item.product_id});
                            var pc = -1<indexOfPC?WholesaleAIO.productInCollects[indexOfPC]:undefined;
                            if(typeof pc !== "undefined"){
                                pc.collection_ids.forEach(function(collection, i){
                                    p_with_c.push({
                                        product_id: last_item.product_id,
                                        collection_id:collection
                                    });
                                });
                            }
                        }catch(e){log(e)}
                    }
                }
                if(current_product_in_collections){
                    current_product_in_collections.forEach(function(collection, i){
                        p_with_c.push({
                            product_id: current_product.id,
                            collection_id:collection.id
                        });
                    });
                }
                p_with_c = products_with_collections.concat(p_with_c);
                if(cart.item_count > 0){
                    if(general_settings.app_enabled){
                        var waioPreDURL = app_url+"/api/223/pre-checkout";
                        wholesaleDiscountReq({
                            preview_mode: WholesaleAIO.previewMode(),
                            note_attributes: [],
                            shipping_address: {},
                            billing_address: {},
                            force_draft_order: false,
                            cc_max_amount: false,
                            cart: cart,
                            shop: shop_domain,
                            customer_id: customer_id,
                            customer_tags: customer_tags,
                            coupon_code_id: coupon_code_id,
                            coupon_code_entitled_ids: coupon_code_entitled_ids,
                            products_with_collections: p_with_c,
                            shopifyCurrencies: getShopifyCurrencies(),
                            prev_price_rule_info: getJSONfromLocalStorage("price_rule_info"),
                            prev_draft_order_info: getJSONfromLocalStorage("draft_order_info")
                        },waioPreDURL,function(e,response){
                            if(e){
                                log(e);
                                log("WAIO Warning", "Error occure at checkout button","warning");
                            }
                            else if(response){
                                log("WAIO LOG! Pre-Checkout Response",response);
                                manageOrderControl(response);
                                showShippingMessage(response);
                                setCartSubtotal(response);
                                setCartItemsPrice(response);
                            }
                        });
                    }
                    else{
                        log("WAIO LOG!","Wholesale all in one is disabled","warning");
                    }
                }
                else{
                    log("WAIO LOG!","No items found in the cart!");
                }
            });
        }

        function setCartItemsPrice(data){
            
            if(data && data.final_discounted_products && data.final_discounted_products.length > 0){
                var discountRuleTracking = [];
                if(Number(data.final_total_discount) > 0){
                    cart_saved_amount_msg(data);
                }
                else{
                    remove_saved_amount_msg();
                }
                for(var iter = 0; iter < data.final_discounted_products.length; iter++){
                    var product = data.final_discounted_products[iter], applied_discount = {};
                    if(data.line_items && data.line_items.length > 0){
                        var iIndex = data.line_items.findIndex(function(x){return x.variant_id == product.variant_id });
                        if(-1<iIndex){
                            applied_discount = data.line_items[iIndex].applied_discount;
                        }
                    }
                    discountRuleTracking.push({
                        id: product.discount_id
                    });
                    // update total line item price
                    update_cart_item_price({
                        "single_item": false,
                        "show_discount": true,
                        "product": product,
                        "applied_discount": applied_discount,
                        "item_element_attr": waioSelectors.wholesaleDataKeyAttr,
                        "html_contents": cart_total_price_html
                    });
                    // update an item price
                    update_cart_item_price({
                        "single_item": true,
                        "show_discount": true,
                        "product": product,
                        "applied_discount": applied_discount,
                        "item_element_attr": waioSelectors.waioSingleDataKeyAttr,
                        "html_contents": cart_single_price_html
                    });
                }
                localStorage.setItem("discount-tracking", JSON.stringify(discountRuleTracking));
            }
            else{
                log("WAIO LOG!", "No discounted products was found!");
            }
        }

        function update_cart_item_price(data){
            var show_discount = data.show_discount, product = data.product, applied_discount = data.applied_discount, html_contents = data.html_contents, item_element_attr = data.item_element_attr, single_item = data.single_item;
            if(product && product.variant_id && applied_discount && "undefined" !== typeof applied_discount.amount){
                if(show_discount){
                var waioItemSel = $("[" + item_element_attr + "=" + product.variant_id + "]");
                var productlinePrice =  Number(Number(mF(product.price))*Number(product.quantity)).toFixed(2);
                var disountedPrice = Number(Number(productlinePrice) - Number(applied_discount.amount)).toFixed(2);
                if(single_item){
                    productlinePrice = WholesaleAIO.priceFloat(mF(product.price));
                    disountedPrice = Number(Number(productlinePrice) - Number(applied_discount.value)).toFixed(2);
                }
                if(waio_settings.compare_at_price){
                    if(waio_settings.show_compare_at_price){
                        var compare_at_price = waioItemSel.attr("data-compare-price");
                        if(compare_at_price!==null){
                        productlinePrice = WholesaleAIO.priceFloat(mF(Number(compare_at_price)));
                        if(!single_item){
                            productlinePrice = (Number(mF(Number(compare_at_price)))*Number(product.quantity)).toFixed(2);
                            log("productlinePrice=>", productlinePrice);
                        }
                        }
                    }
                }
                log("===> productlinePrice", productlinePrice, "disountedPrice", disountedPrice);
                var html = update_product_price_html({
                        original_price: productlinePrice,
                        discounted_price: disountedPrice,
                        id: product.variant_id,
                        elem: waioItemSel,
                        html_contents: html_contents
                    });
                    waioItemSel.html(html);
                }
            }
            else{
                log("product object || variant id || waio object is missing at func: display cart item single_price")
            }
        }

        function update_product_price_html(params){
            log("params",params)
            var original_price = params.original_price,discounted_price = params.discounted_price,id = params.id,elem = params.elem,html_contents = params.html_contents;
            var cf_org = currency_format, cf_ds = currency_format;
            if(WholesaleAIO.settings.hide_cents){
                if((original_price) % 1 === 0) cf_org = currency_format_without_demical;
                if((discounted_price) % 1 === 0) cf_ds = currency_format_without_demical;
            }
            if(!WholesaleAIO.settings.compare_at_price){
                var hideMe = '<span style="display:none;" class="waio--noCompareAtPrice">[[strikethrough_price]]</span>';
                html_contents = html_contents.replaceMeW('[[strikethrough_price]]',hideMe);
            }
            var savedAmount = WholesaleAIO.savedAmount(original_price,discounted_price,"fixed_price");
            var saved_in_percent = ""; var saved_fixed_amount = "";
            if(savedAmount && !savedAmount.error){
                saved_in_percent = savedAmount.in_percent;
                saved_fixed_amount = savedAmount.fixed_amount;
            }
            else{
                log("WAIO Warning", "Saved amount not working as expected. Debug code to find out the bug or error." ,"warning");
            }
            if(Number(discounted_price) >= Number(original_price)){
                var hideMe = '<span style="display:none;" class="waio--noCompareAtPrice">[[strikethrough_price]]</span>';
                html_contents = html_contents.replaceMeW('[[strikethrough_price]]',hideMe);
            }
            var _discounted_price = WholesaleAIO.formatMoney(discounted_price, cf_ds);
            var _strikethrough_price = WholesaleAIO.formatMoney(original_price, cf_org);
            saved_fixed_amount = WholesaleAIO.formatMoney(WholesaleAIO.priceFormat(saved_fixed_amount), currency_format);
            var html = html_contents.replaceMeW('[[wholesale_price]]',_discounted_price)
            .replaceMeW('[[strikethrough_price]]',_strikethrough_price)
            .replaceMeW('[[saved_in_percent]]',saved_in_percent)
            .replaceMeW('[[saved_fixed_amount]]',saved_fixed_amount);
            return html;
        }

        function setCartSubtotal(data){
            log("setCartSubtotal data",data);
            var cartSub = (data.cart_subtotal).toString();
            if(-1<cartSub.indexOf(".")){
                if(1==cartSub.split(".")[1].length){
                cartSub=Number(cartSub).toFixed(2);
                }
            }
            if(WholesaleAIO.settings.show_compare_at_price){
                var _total_price_Amount=0;
                if(data.line_items && typeof data.line_items !== "undefined"){
                    data.line_items.forEach(function(_itm, i){
                    var _selector = $("["+waioSelectors.waioSingleDataKeyAttr+"="+_itm.id+"]");
                    if(_selector.length == 0) _selector = $("["+waioSelectors.wholesaleDataKeyAttr+"="+_itm.id+"]");
                    var isCompareAt = _selector.attr('data-compare-price');
                    if(!WholesaleAIO.settings.show_compare_at_price) isCompareAt = null;
                    if(typeof isCompareAt !== "undefined" &&isCompareAt!==null){
                        isCompareAt=(Number(mF(Number(isCompareAt))) * Number(_itm.quantity));
                    }
                    else{
                        isCompareAt=Number(mF(Number(_itm.price)))*Number(_itm.quantity);
                    }
                    _total_price_Amount+=isCompareAt;
                    log('isCompareAt', isCompareAt)
                    });
                    data.original_total_price=_total_price_Amount*100;
                }
                else if(data.cart){
                    data.cart.items.forEach(function(_itm, i){
                        var _selector = $("["+waioSelectors.waioSingleDataKeyAttr+"="+_itm.id+"]");
                        if(_selector.length == 0) _selector = $("["+waioSelectors.wholesaleDataKeyAttr+"="+_itm.id+"]");
                        var isCompareAt = _selector.attr('data-compare-price');
                        if(!WholesaleAIO.settings.show_compare_at_price) isCompareAt = null;
                        if(typeof isCompareAt !== "undefined" &&isCompareAt!==null){
                            isCompareAt=(Number(mF(Number(isCompareAt))) * Number(_itm.quantity));
                        }
                        else{
                            isCompareAt=Number(mF(Number(_itm.price)))*Number(_itm.quantity);
                        }
                        _total_price_Amount+=isCompareAt;
                        log('isCompareAt', isCompareAt)
                    });
                    data.original_total_price=_total_price_Amount*100;
                }
                data.original_total_price=WholesaleAIO.priceFloat(data.original_total_price);
            }
            if(data && -1 < Number(data.original_total_price)){
                if(Number(data.original_total_price) <= Number(cartSub)){
                    log("WAIO LOG!", "We did not change subtotal's HTML.");
                    return false;
                }
                log("SUBTOTAL ==> data.cart_subtotal -- cartSub", cartSub);
                log("SUBTOTAL ==> data.cart_total_price", data.cart_total_price);
                if(Number(data.cart_total_price) > Number(cartSub) ){
                    var html = cartSubtotalHTML({
                        cart_total_price: data.original_total_price,
                        cart_subtotal: cartSub,
                        html_contents: cart_subtotal_price_html,
                        compare_at_price: true
                    });
                    if(html){
                        $("["+waioSelectors.cartSubtotalPriceAttr+"]").html(html);
                    }
                    else{
                        log("WAIO log!", "Cart subtotal price not changed. See cartSubtotalHTML();","warning");
                    }
                }
            }
        }

        function cartSubtotalHTML(data){
            if(data && "undefined" !== typeof data.cart_subtotal){
                if(!isNaN(data.cart_subtotal)){
                    log("cartSubtotalHTML data",data);
                    var cf_org = currency_format,
                    cf_ds = currency_format;
                    if(WholesaleAIO.settings.hide_cents){
                        if(parseFloat(data.cart_total_price) % 1 === 0) cf_org = currency_format_without_demical;
                        if(parseFloat(data.cart_subtotal) % 1 === 0) cf_ds = currency_format_without_demical;
                    }
                    var _discounted_price = WholesaleAIO.formatMoney((data.cart_subtotal), cf_ds);
                    var _strikethrough_price = WholesaleAIO.formatMoney(data.cart_total_price, cf_org);
                  var _fixed_saved_price = parseFloat(data.cart_total_price)-parseFloat(data.cart_subtotal);
                  _fixed_saved_price = Number(_fixed_saved_price).toFixed(2);
                  _fixed_saved_price = WholesaleAIO.formatMoney(_fixed_saved_price)
                    if(Number(_discounted_price) == Number(_strikethrough_price)){
                       return false; 
                    }
                    else if(Number(_discounted_price) > Number(_strikethrough_price)){
                        _strikethrough_price = '<span style="display:none;" class="waio--noCompareAtPrice">'+_strikethrough_price+'</span>';
                    }
                    if(!WholesaleAIO.settings.compare_at_price || !data.compare_at_price){
                        _strikethrough_price = '<span style="display:none;" class="waio--noCompareAtPrice">'+_strikethrough_price+'</span>';
                    }
                    var html = data.html_contents.replaceMeW('[[wholesale_price]]',_discounted_price)
                    .replaceMeW('[[strikethrough_price]]',_strikethrough_price)
                  .replaceMeW('[[saved_fixed_amount]]',_fixed_saved_price);
                    return html;
                }
                else{
                    log("WAIO Warning","Cart subtotal price is missing","warning");
                    return false;
                }
            }
            else{
                log("WAIO Warning","Cart subtotal price is missing","warning");
                return false;
            }
        }

        function reset_coupon_code_id(){
            coupon_code_id = "ca54e877f83b5bf5882aeb63f2ceb5b16c"; //pre defined id
            coupon_code_entitled_ids = {variants:[],products:[]};
            localStorage.removeItem("ws-applied-coupon");// remove applied coupon code details
            coupon_code_applied = "";
        }

        function showShippingMessage(data){
            if(typeof data === "undefined") var data = {};
            if(typeof config === "undefined") var config = {};
            var shipping_rule = data.shipping_rule;
            if(!(shipping_rule)) return false;
            var charges = shipping_rule.charges,
            message = shipping_rule.message,
            title = shipping_rule.title,
            requires_shipping = shipping_rule.requires_shipping;
            if(typeof message !== "undefined" && typeof requires_shipping !== "undefined" && requires_shipping){
                if(message){
                    if($(".waio--shipping-message").length > 0){
                        $(".waio--shipping-message").html(message);
                    }
                    else{
                        var html = '<div class="waio--shipping-message">'+message+'</div>';
                        if(config && config.shippingMessageElement){
                            findLocationAndAddHTML(config.shippingMessageElement, html);
                        }
                        else{
                            $(html).insertAfter("["+waioSelectors.cartSubtotalPriceAttr+"]");
                        }
                    }
                }
                else{
                    log("WAIO LOG!", "No shipping message found! I guess shipping message was null. You can set shipping message from the wholesale all in one application's UI.");
                }
            }
        }

        function manageOrderControl(data){
            var original_total_price = data.cart_subtotal
            if(typeof original_total_price === "string"){
                original_total_price = original_total_price.replace(".","");
            }
            waioMOC.cart.original_total_price = original_total_price;
            WholesaleAllInOne.order_control();
        }

        function saved_amount_msg(a){a=WholesaleAIO.formatMoney(a,currency_format);a=waio_saved_amount_text.replaceMeW("[[saved_amount]]",a);$(waioSelectors.savedAmount).html(a)};
        function remove_saved_amount_msg(){$(waioSelectors.savedAmount).html("");}        
        function cart_saved_amount_msg(data){
            log("data",data)
            var _total_price_Amount=0,_total_discount_Amount=0;
            if(data.line_items && typeof data.line_items !== "undefined")
            {
            data.line_items.forEach(function(_itm, i){
                var _selector = $("["+waioSelectors.waioSingleDataKeyAttr+"="+_itm.id+"]");
                if(_selector.length == 0) _selector = $("["+waioSelectors.wholesaleDataKeyAttr+"="+_itm.id+"]");
                var isCompareAt = _selector.attr('data-compare-price');
                if(!WholesaleAIO.settings.show_compare_at_price) isCompareAt = null;
                if(typeof isCompareAt !== "undefined" &&isCompareAt!==null){
                isCompareAt=(Number(mF(Number(isCompareAt))) * Number(_itm.quantity));
                }
                else{
                isCompareAt=Number(mF(Number(_itm.price)))*Number(_itm.quantity);
                }
                if(_itm.applied_discount && _itm.applied_discount.amount) _total_discount_Amount+=((Number(mF(Number(_itm.price)))*Number(_itm.quantity) )-Number(_itm.applied_discount.amount));
                _total_price_Amount+=isCompareAt;
                log('isCompareAt', isCompareAt)
            });
            data.original_total_price=_total_price_Amount;
            }
            else if (data.response && data.response.cart){
            data.response.cart.items.forEach(function(_itm, i){
                var _selector = $("["+waioSelectors.waioSingleDataKeyAttr+"="+_itm.id+"]");
                if(_selector.length == 0) _selector = $("["+waioSelectors.wholesaleDataKeyAttr+"="+_itm.id+"]");
                var isCompareAt = _selector.attr('data-compare-price');
                if(!WholesaleAIO.settings.show_compare_at_price) isCompareAt = null;
                if(typeof isCompareAt !== "undefined" &&isCompareAt!==null){
                isCompareAt=(Number(mF(Number(isCompareAt))) * Number(_itm.quantity));
                }
                else{
                isCompareAt=Number(mF(Number(_itm.price)))*Number(_itm.quantity);
                }
                _total_price_Amount+=isCompareAt;
                log('isCompareAt', isCompareAt)
            });
            _total_discount_Amount=data.app_final_subtotal;
            data.original_total_price=_total_price_Amount;
            }
            var savedAmount=WholesaleAIO.savedAmount2(_total_price_Amount,_total_discount_Amount),saved_in_percent="",saved_fixed_amount="";
            log("WAIO LOG! saved amount results2",savedAmount);
            savedAmount&&!savedAmount.error?(saved_in_percent=savedAmount.in_percent,saved_fixed_amount=savedAmount.fixed_amount):log("WAIO Warning","Saved amount not working as expected. Debug code to cart_saved_amount_msg() to find out the bug or error.","warning"); 
            saved_fixed_amount = WholesaleAIO.formatMoney(WholesaleAIO.priceFormat(saved_fixed_amount), currency_format);
            saved_fixed_amount=waio_saved_amount_text.replaceMeW("[[saved_amount]]",saved_fixed_amount);
            $(waioSelectors.savedAmount).html(saved_fixed_amount);
        }
        // end cart template

        //main function of product template for quantity breaks
        function quantityBreak__product(config){
            if("undefined" === typeof config) var config = {};
            var quick_view = null;
            var show_in_quick_view = false;  
            var product_id = current_product.id;
            var variant_id = selected_variant_id;
            var original_price = current_product.price;
            var priceSelector = "waio";
            var html_contents = product_price_html;
            var saleBadgeDirectParent = null;
            var SaleBadgeDirectChild = null;
            var saleLabelHTML = "Saved [[saved_amount]]";
            var saleLabelMode = "percent";
            var quickViewQBSelector = waioSelectors.addToCart;
            var qbTableSelector = waioSelectors.addToCart+":after";

            if(config){
                if(config.productId && config.productId !== "default"){
                    product_id = config.productId;
                }
                if(config.variantId && config.variantId !== "default"){
                    variant_id = config.variantId;
                }
                if(config.price && config.price !== "default"){
                    original_price = config.price;
                }
                if(config.priceDesign && config.priceDesign !== "default"){
                    html_contents = config.priceDesign;
                }
                if(config.saleBadgeDirectParent && config.saleBadgeDirectParent !== "default"){
                    saleBadgeDirectParent = config.saleBadgeDirectParent;
                }
                if(config.SaleBadgeDirectChild && config.SaleBadgeDirectChild !== "default"){
                    SaleBadgeDirectChild = config.SaleBadgeDirectChild;
                }
                if(config.saleLabelHTML && config.saleLabelHTML !== "default"){
                    saleLabelHTML = config.saleLabelHTML;
                }
                if(config.saleLabelMode && config.saleLabelMode !== "default"){
                    saleLabelMode = config.saleLabelMode;
                }
                if(typeof config.quickView !== "undefined" && config.quickView !== null && config.quickView !== "default"){
                    show_in_quick_view = config.quickView;
                }
                if(config.quickViewQBSelector && config.quickViewQBSelector !== "default"){
                    quickViewQBSelector = config.quickViewQBSelector;
                }
                if(config.priceSelector && config.priceSelector !== "default"){
                    priceSelector = config.priceSelector;
                }
                if(config.qbTableSelector && config.qbTableSelector !== "default"){
                    qbTableSelector = config.qbTableSelector;
                }
            }

            if(show_in_quick_view){
                quick_view = {
                    el: quickViewQBSelector,
                    price: original_price,
                    product_id: product_id
                };
            }
            if(variant_id){
                if(config.price === "default" || !config.price){
                    if(current_product.variants && current_product.variants.length > 0){
                        try{
                            var findIndex =  current_product.variants.findIndex(function(x){return x.id ==variant_id});
                            if(findIndex > -1){
                                if(current_product.variants[findIndex].price){
                                    original_price = current_product.variants[findIndex].price;
                                }
                            }
                        }catch(e){log(e)}
                    }
                }
            }
            if(!product_id || !variant_id || !priceSelector || $(priceSelector).length === 0){
                productTemplateGetIds(function(product_info){
                    if(!product_id && product_info.product_id){
                        product_id = product_info.product_id;
                    }
                    if(!variant_id && product_info.variant_id){
                        variant_id = product_info.variant_id;
                    }
                    if(!priceSelector || $(priceSelector).length === 0 && product_info.el){
                        priceSelector = product_info.el;
                    }
                });
            }
            if(!product_id || product_id === null){
                log("Product id","is missing on product template","warning")
            }
            if(!variant_id || variant_id === null){
                log("Variant id","is missing on product template","warning");
            }
            if(!original_price || original_price === null || isNaN(original_price)) {
                log(product_id,"Product price is missing on product template (func: quantityBreak__product at product template)","error");
            }
            if($(priceSelector).length === 0){
                log("Element not found.","info:Target element not provided or missing config on product template. ","warning");
            }
            WholesaleAIO.template === "product";
            var discount_on_specific_variants = [];
            var discount_on_specific_products = [];
            var discount_on_specific_collections = [];
            var discount_on_entire_store = [];
            for(var iter = 0; iter < WholesaleAIO.qb.length; iter++){
                var qb = WholesaleAIO.qb[iter];
                if(qb.status === "published" || (WholesaleAIO.previewMode() && qb.status === "draft")){
                if(qb.customers_group === "only_logged_in" && !is_loggedIn)continue;
                if(qb.except_logged_in && is_loggedIn) continue;
                if(qb.except_tags && isTagged(qb.excepted_tags)) continue;
                else if(qb.customers_group === "tag_based"){
                    if(!is_loggedIn)continue;
                    var cus_tags = customerTags.map(function (e) {
                    return e.toUpperCase()
                    });
                    if(!(cus_tags.indexOf(qb.customer_tag.toUpperCase())>-1))continue;
                }
                add_qb_discount__204({
                    qb:qb,
                    discount_on_specific_variants:discount_on_specific_variants,
                    discount_on_specific_products:discount_on_specific_products,
                    discount_on_specific_collections:discount_on_specific_collections,
                    discount_on_entire_store:discount_on_entire_store
                }, function(results){
                    log(results);
                    if(results.type === "selected_variants" && results.status === "approved"){
                    discount_on_specific_variants.push(qb);
                    }
                    if(results.type === "selected_products" && results.status === "approved"){
                    discount_on_specific_products.push(qb);
                    }
                    if(results.type === "selected_collections" && results.status === "approved"){
                    discount_on_specific_collections.push(qb);
                    }
                    if(results.type === "entire_store" && results.status === "approved"){
                    discount_on_entire_store.push(qb);
                    }
                });
                }
            } // end for loop
            log("Result QB: discount_on_specific_variants",discount_on_specific_variants);
            log("Result QB: discount_on_specific_products",discount_on_specific_products);
            log("Result QB: discount_on_specific_collections",discount_on_specific_collections);
            log("Result QB: discount_on_entire_store",discount_on_entire_store);
            if(discount_on_specific_products.length > 0 || discount_on_specific_collections.length > 0 || discount_on_entire_store.length > 0 || discount_on_specific_variants.length ){
                get_relivant_qb_rule_204({
                    product_id:product_id,
                    variant_id:variant_id,
                    variants_array: discount_on_specific_variants,
                    products_array: discount_on_specific_products,
                    collections_array: discount_on_specific_collections,
                    entireStore_array: discount_on_entire_store
                }, function(result){
                    log("Product id:" , product_id);
                    log(result);
                    if(result.status === 1){
                    try{
                        product_qb_applied = false;
                        create__table_grid({
                            variant_id: variant_id,
                            price: original_price,
                            el: qbTableSelector,
                            quick_view: quick_view,
                            product_discount_array: [{
                                id: product_id,
                                qb_applies_to: result.final_result.qb_applies_to,
                                qb_calculation_type: result.final_result.qb_calculation_type,
                                qb_type: result.final_result.qb_type,
                                schedule: result.final_result.schedule,
                                schedule_active: result.final_result.schedule_active,
                                variants: result.final_result.variants,
                                volume_discount: result.final_result.volume_discount,
                                display_option: result.final_result.display_option,
                                custom_css: result.final_result.custom_css
                            }]
                        });
                        $(priceSelector).addClass("WAIO--qb-applied");
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "quantity_break_for_product",
                                message: "Quantity break applied",
                                data: result.final_result,
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                            });
                        }
                    }
                    catch(e){
                        log(e);
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "quantity_break_for_product",
                                message: "Error",
                                data: [],
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: e
                            });
                        }
                    }
                    }
                    else{
                        log("QB: No discount on this product id:" , product_id);
                        $(".wholesale-table").remove();
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "quantity_break_for_product",
                                message: "No qb discount on this product id",
                                data: [],
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                            });
                        }
                    }
                });
            }
            else{
                log("QB: No discount on this product:" + product_id);
                $(".wholesale-table").remove();
                if (typeof WholesaleAllInOne.callback === "function") {
                    WholesaleAllInOne.callback({
                        event: "quantity_break_for_product",
                        message: "No qb discount on this product id",
                        data: [],
                        product_id: product_id,
                        variant_id: variant_id,
                        //config: config,
                        errors: null
                    });
                }
            }
            addBuyNowBtnClass();
        };

        //main function for product template for discount groups
        function discountGroup__product(config){
            if ("undefined" === typeof config) var config = {};
            "undefined" === typeof current_product && (current_product = {});
            null === current_product && (current_product = {});
            var compare_at_price = current_product.compare_at_price,quick_view = null,show_in_quick_view = !1,product_id = current_product.id,variant_id = selected_variant_id,original_price = current_product.price,priceSelector = waioSelectors.waioProductPriceClass,html_contents = product_price_html,saleBadgeDirectParent = null,SaleBadgeDirectChild = null,saleLabelHTML = "Saved [[saved_amount]]",saleLabelMode = "percent",quickViewQBSelector = waioSelectors.addToCart + ":after",saleLabelPosition = "same",productPrice = current_product.price,compareAtPrice = current_product.compare_at_price;
            config && (config.productId && "default" !== config.productId && (product_id = config.productId), config.variantId && "default" !== config.variantId && (variant_id = config.variantId), config.price && "default" !== config.price && (original_price = config.price, productPrice = config.price), config.compareAtPrice && "default" !== config.compareAtPrice && (compareAtPrice = config.compareAtPrice), config.priceDesign && "default" !== config.priceDesign && (html_contents = config.priceDesign), config.saleBadgeDirectParent && "default" !== config.saleBadgeDirectParent && (saleBadgeDirectParent = config.saleBadgeDirectParent), config.SaleBadgeDirectChild && "default" !== config.SaleBadgeDirectChild && (SaleBadgeDirectChild = config.SaleBadgeDirectChild), config.saleLabelHTML && "default" !== config.saleLabelHTML && (saleLabelHTML = config.saleLabelHTML), config.saleLabelMode && "default" !== config.saleLabelMode && (saleLabelMode = config.saleLabelMode), config.saleLabelPosition && "default" !== config.saleLabelPosition && (saleLabelPosition = config.saleLabelPosition), "undefined" !== typeof config.quickView && null !== config.quickView && "default" !== config.quickView && (show_in_quick_view = config.quickView), config.quickViewQBSelector && "default" !== config.quickViewQBSelector && (quickViewQBSelector = config.quickViewQBSelector), config.priceSelector && "default" !== config.priceSelector && (priceSelector = config.priceSelector), config.qbTableSelector && "default" !== config.qbTableSelector && (qbTableSelector = config.qbTableSelector));
            show_in_quick_view && (quick_view = {
                el: quickViewQBSelector, price: original_price, product_id: product_id
            });
            if (variant_id && 0 < current_product.variants.length) {
                try{
                    var findIndex = current_product.variants.findIndex(function (a) { return a.id == variant_id });
                    - 1 < findIndex && ("default" === config.price || config.price === null) && current_product.variants[findIndex].price && (original_price = current_product.variants[findIndex].price);
                    - 1 < findIndex && (compare_at_price = current_product.variants[findIndex].compare_at_price, compareAtPrice=compare_at_price)            
                }catch(e){log(e)}
            };
            product_id && variant_id && priceSelector && !(0 >= $(priceSelector).length) || productTemplateGetIds(function (a) {
                !product_id && a.product_id && (product_id = a.product_id);
                !variant_id && a.variant_id && (variant_id = a.variant_id);
                !priceSelector && a.el && (priceSelector = a.el)
            });
            product_id && null !== product_id || log("Product id", "product_id missing", "warning");
            variant_id && null !== variant_id || log("Variant id", "variant_id missing", "warning");
            original_price && null !== original_price && !isNaN(original_price) || log(product_id, "Product price is missing (func: discountGroup__product at product template)", "error");
            WholesaleAIO.template === "product";
            if(WholesaleAIO.dg.length > 0){
                var discount_on_specific_variants = []; //skiped, not working
                var discount_on_specific_products = [];
                var discount_on_specific_collections = [];
                var discount_on_entire_store = [];
                for(var iter = 0; iter < WholesaleAIO.dg.length; iter++){
                    var dg_rule = WholesaleAIO.dg[iter];
                    if(dg_rule.status !== "published" && (WholesaleAIO.previewMode() && dg_rule.status !== "draft"))continue;
                    if(dg_rule.except_logged_in && is_loggedIn)continue;
                    if(dg_rule.except_tags && isTagged(dg_rule.excepted_tags))continue;
                    if(dg_rule.customers_group == 'tagged_customer'){
                        if(!is_loggedIn)continue;
                        else{
                            var customer_tags = customerTags.map(function (e) {
                                return e.toUpperCase()
                            });
                            if(!(customer_tags.indexOf(dg_rule.tags.toUpperCase())>-1)){
                                continue;
                            }
                        }
                    }
                    else if(dg_rule.customers_group == 'only_logged_in_customers' && !is_loggedIn){continue;}
                    add_discount__v202({
                        render_for: "product",
                        dg:dg_rule,
                        discount_on_specific_variants:discount_on_specific_variants,
                        discount_on_specific_products:discount_on_specific_products,
                        discount_on_specific_collections:discount_on_specific_collections,
                        discount_on_entire_store:discount_on_entire_store
                    }, function(results){
                        log("WAIO LOG! add_discount__v202()'s results", results);
                        "specific_variants"===results.type&&"approved"===results.status&&discount_on_specific_variants.push(dg_rule);"specific_products"===results.type&&"approved"===results.status&&discount_on_specific_products.push(dg_rule);"specific_collections"===results.type&&"approved"===results.status&&discount_on_specific_collections.push(dg_rule);"entire_store"===results.type&&"approved"===results.status&&discount_on_entire_store.push(dg_rule);
                    });
                } // end for
                log("Result DG: discount_on_specific_variants",discount_on_specific_variants);
                log("Result DG: discount_on_specific_products",discount_on_specific_products);
                log("Result DG: discount_on_specific_collections",discount_on_specific_collections);
                log("Result DG: discount_on_entire_store",discount_on_entire_store);
                if(discount_on_specific_variants.length > 0 || discount_on_specific_products.length > 0 || discount_on_specific_collections.length > 0 || discount_on_entire_store.length > 0 ){
                    get_relivant_rule_v202({
                        product_id:product_id,
                        variant_id:variant_id,
                        variants_array: discount_on_specific_variants,
                        products_array:discount_on_specific_products,
                        collections_array: discount_on_specific_collections,
                        entireStore_array: discount_on_entire_store
                    }, function(result){
                    log("Product id:", product_id);
                    log("Result from get relivant rule: ", result);
                    if(result.status === 1){
                        saleBadge({product_price:original_price,discount_type:result.final_result.type,discount_value:result.final_result.value,product_id:product_id,el:$(priceSelector).parents(saleBadgeDirectParent).find(SaleBadgeDirectChild),saleLabelMode:saleLabelMode,saleLabelHTML:saleLabelHTML,saleLabelPosition:saleLabelPosition});
                        updatePriceHTML({
                            discountType : result.final_result.type,
                            discountValue : WholesaleAIO.priceFormat(result.final_result.value), // 99 to 9900, and 10 to 1000 
                            productPrice : productPrice,
                            compareAtPrice : compareAtPrice,
                            productId : product_id,
                            priceElement : $(priceSelector),
                            html_contents : html_contents,
                            template : "product",
                            pIdAttrSelector: null,
                        });
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "general_discount_for_product",
                                message: "Generald discount applied",
                                data: result.final_result,
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                            });
                        }
                        result.final_result.schedule_active&&($("#wholesale-ends-notification").remove(),$(".wholesale-ends-notification").remove(),run_schedule_clock(result.final_result));
                    }
                    else{
                        log("No discount on this product id:", product_id);
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "general_discount_for_product",
                                message: "Generald discount applied",
                                data: result.final_result,
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                            });
                        }
                    }
                    });
                }
                else{
                  waioSelectors.check_discount = 1;
                    log("No discount on this variant:", variant_id);
                    $("#wholesale-ends-notification").remove();
                    compare_at_price<=original_price&&(html_contents=price_design_config.preDiscount_product_price_html||preDiscount_product_price_html);
                    var html=productOriginalPriceHTML({
                        original_price:original_price,
                        compare_at_price:compare_at_price,
                        product_id:product_id,
                        variant_id:variant_id,
                        element:$(priceSelector),
                        html_contents:html_contents,
                        show_compare_at_price:!0
                    });
                     $(priceSelector).html(html); //Uncomment it only when variant change function does not update price.
                    if (typeof WholesaleAllInOne.callback === "function") {
                        WholesaleAllInOne.callback({
                            event: "general_discount_for_product",
                            message: "No discount on this variant",
                            data: html,
                            product_id: product_id,
                            variant_id: variant_id,
                            //config: config,
                            errors: null
                        });
                    }
                }
            }
            else{
                log("No discount rule was created in wholesale all in one app!");
                if (typeof WholesaleAllInOne.callback === "function") {
                    WholesaleAllInOne.callback({
                        event: "general_discount_for_product",
                        message: "No discount rule was created in wholesale all in one app!",
                        data: [],
                        product_id: product_id,
                        variant_id: variant_id,
                        //config: config,
                        errors: null
                    });
                }
            }
            addBuyNowBtnClass();
        };

        // Home, collection, search and related products template
        function discountGroup__hcsrp(data){
            if("undefined" === typeof data) var data = {};
            var class_selector=data.elementSelector||waioSelectors.wholesalePriceClass,idAttr_selector=data.dataIdSelector||waioSelectors.dataItemIdAttr,priceAttr_selector=data.dataPriceSelector||waioSelectors.dataItemPriceAttr,variantIdAttr_selector=data.dataVariantSelector||"data-variant-id",html_contents=data.priceDesign||product_price_coll_html,saleBadgeDirectParent=data.saleBadgeDirectParent||"form",SaleBadgeDirectChild=data.SaleBadgeDirectChild||".waio-saved-amount",saleLabelMode=data.saleLabelMode||"percent",saleLabelHTML=data.saleLabelHTML||"You saved [[saved_amount]]",saleLabelPosition=data.saleLabelPosition||"same";
            WholesaleAIO.template = data.template || WholesaleAIO.template;
            "product"===WholesaleAIO.template&&(WholesaleAIO.template="collection");WholesaleAIO.template||(WholesaleAIO.template="collection");
            if(WholesaleAIO.dg.length > 0){
                var discount_on_specific_variants = []; //skiped, not working
                var discount_on_specific_products = [];
                var discount_on_specific_collections = [];
                var discount_on_entire_store = [];
                for(var iter = 0; iter < WholesaleAIO.dg.length; iter++){
                    var dg_rule = WholesaleAIO.dg[iter];
                    if(dg_rule.status !== "published" && (WholesaleAIO.previewMode() && dg_rule.status !== "draft"))continue;
                    if(dg_rule.except_logged_in && is_loggedIn)continue;
                    if(dg_rule.except_tags && isTagged(dg_rule.excepted_tags))continue;
                    if(dg_rule.customers_group == 'tagged_customer'){
                        if(!is_loggedIn)continue;
                        else{
                            var customer_tags = customerTags.map(function (e) {
                                return e.toUpperCase()
                            });
                            if(!(customer_tags.indexOf(dg_rule.tags.toUpperCase())>-1)){
                                continue;
                            }
                        }
                    }
                    else if(dg_rule.customers_group == 'only_logged_in_customers' && !is_loggedIn){continue;}
                    add_discount__v202({
                        render_for: "hcsrp",
                        dg:dg_rule,
                        discount_on_specific_variants:discount_on_specific_variants,
                        discount_on_specific_products:discount_on_specific_products,
                        discount_on_specific_collections:discount_on_specific_collections,
                        discount_on_entire_store:discount_on_entire_store
                    }, function(results){
                        log("WAIO LOG! add_discount__v202()'s results", results);
                        "specific_variants"===results.type&&"approved"===results.status&&discount_on_specific_variants.push(dg_rule);
                        "specific_products"===results.type&&"approved"===results.status&&discount_on_specific_products.push(dg_rule);
                        "specific_collections"===results.type&&"approved"===results.status&&discount_on_specific_collections.push(dg_rule);
                        "entire_store"===results.type&&"approved"===results.status&&discount_on_entire_store.push(dg_rule);
                    });
                } // end for
                log("Result from Discount Groups");
                log(discount_on_specific_variants);
                log(discount_on_specific_products);
                log(discount_on_specific_collections);
                log(discount_on_entire_store);
                addBuyNowBtnClass();
                $(class_selector).each(function(){
                    var $that=this,product_id=$($that).attr(idAttr_selector),variant_id=$($that).attr(variantIdAttr_selector),original_price=Number($($that).attr(priceAttr_selector)),productPrice=Number($($that).attr(priceAttr_selector)),compareAtPrice=Number($($that).attr("data-compare-price")),collectionsIds=$($that).attr("data-collection-ids");
                    if(discount_on_specific_products.length > 0 || discount_on_specific_collections.length > 0 || discount_on_entire_store.length > 0 ){
                        get_relivant_rule_v202({collectionsIds: collectionsIds,product_id:product_id,variant_id:variant_id,variants_array: discount_on_specific_variants,products_array:discount_on_specific_products,collections_array: discount_on_specific_collections,entireStore_array: discount_on_entire_store},function(result){
                            log("Product id:" + product_id);
                            log(result);
                            if(result.status === 1){
                                saleBadge({product_price:original_price,discount_type:result.final_result.type,discount_value:result.final_result.value,product_id:product_id,el:$($that).parents(saleBadgeDirectParent).find(SaleBadgeDirectChild),saleLabelMode:saleLabelMode,saleLabelHTML:saleLabelHTML,saleLabelPosition:saleLabelPosition});
                                updatePriceHTML({
                                    discountType : result.final_result.type,
                                    discountValue : WholesaleAIO.priceFormat(result.final_result.value), // 99 to 9900, and 10 to 1000 
                                    productPrice : productPrice,
                                    compareAtPrice : compareAtPrice,
                                    productId : product_id,
                                    priceElement : $($that),
                                    html_contents : html_contents,
                                    template : "collection",
                                    pIdAttrSelector: idAttr_selector,
                                });
                                if (typeof WholesaleAllInOne.callback === "function") {
                                    WholesaleAllInOne.callback({
                                        event: "general_discount_for_hcsrp",
                                        message: "Discount applied on this item",
                                        data: result.final_result,
                                        product_id: product_id,
                                        variant_id: variant_id,
                                        //config: config,
                                        errors: null
                                    });
                                }
                            }
                            else{
                                log("No discount on this product id:" + product_id);
                                if (typeof WholesaleAllInOne.callback === "function") {
                                    WholesaleAllInOne.callback({
                                        event: "general_discount_for_hcsrp",
                                        message: "No discount on this product id",
                                        data: [],
                                        product_id: product_id,
                                        variant_id: variant_id,
                                        //config: config,
                                        errors: null
                                    });
                                }
                            }
                        });
                    }
                    else{
                        log("No discount on this product:" + product_id);
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "general_discount_for_hcsrp",
                                message: "No discount on this product",
                                data: [],
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                            });
                        }
                    }
                });
            }
        };
        
        function quantityBreak__hcsrp(data){
            if("undefined" === typeof data) var data = {};
            var class_selector = data.elementSelector || waioSelectors.wholesalePriceClass;
            var idAttr_selector = data.dataIdSelector || waioSelectors.dataItemIdAttr;
            var priceAttr_selector = data.dataPriceSelector || waioSelectors.dataItemPriceAttr;
            var variantIdAttr_selector = data.dataVariantSelector || "variant-id";
            var html_contents = data.priceDesign || product_price_coll_html;
            WholesaleAIO.template = data.template || WholesaleAIO.template;
            if(WholesaleAIO.template === "product"){
                WholesaleAIO.template = "collection";
            }
            if(!WholesaleAIO.template){
                WholesaleAIO.template = "collection";
            }
            var discount_on_specific_variants = [];
            var discount_on_specific_products = [];
            var discount_on_specific_collections = [];
            var discount_on_entire_store = [];
            for(var iter = 0; iter < WholesaleAIO.qb.length; iter++){
                var qb = WholesaleAIO.qb[iter];
                if(qb.status === "published" || (WholesaleAIO.previewMode() && qb.status === "draft")){
                    if(qb.customers_group === "only_logged_in" && !is_loggedIn)continue;
                    if(qb.except_logged_in && is_loggedIn) continue;
                    if(qb.except_tags && isTagged(qb.excepted_tags)) continue;
                    else if(qb.customers_group === "tag_based"){
                        if(!is_loggedIn)continue;
                        var cus_tags = customerTags.map(function (e) {
                        return e.toUpperCase()
                        });
                        if(!(cus_tags.indexOf(qb.customer_tag.toUpperCase()) >-1))continue;
                    }
                    add_qb_discount__204({
                        qb:qb,
                        discount_on_specific_variants:discount_on_specific_variants,
                        discount_on_specific_products:discount_on_specific_products,
                        discount_on_specific_collections:discount_on_specific_collections,
                        discount_on_entire_store:discount_on_entire_store
                    }, function(results){
                        log(results);
                        if(results.type === "selected_variants" && results.status === "approved"){
                        discount_on_specific_variants.push(qb);
                        }
                        if(results.type === "selected_products" && results.status === "approved"){
                        discount_on_specific_products.push(qb);
                        }
                        if(results.type === "selected_collections" && results.status === "approved"){
                        discount_on_specific_collections.push(qb);
                        }
                        if(results.type === "entire_store" && results.status === "approved"){
                        discount_on_entire_store.push(qb);
                        }
                    });
                }
            } // end for loop
            log("Result from Quantity breaks")
            log(discount_on_specific_variants);
            log(discount_on_specific_products);
            log(discount_on_specific_collections);
            log(discount_on_entire_store);
            $(class_selector).each(function(){
                var $that = this;
                var product_id = $($that).attr(idAttr_selector);
                var variant_id = $($that).attr(variantIdAttr_selector);
                var original_price = Number($($that).attr(priceAttr_selector));
                if(discount_on_specific_products.length > 0 || discount_on_specific_collections.length > 0 || discount_on_entire_store.length > 0 || discount_on_specific_variants.length ){
                get_relivant_qb_rule_204({
                    product_id:product_id,
                    variant_id:variant_id,
                    variants_array: discount_on_specific_variants,
                    products_array: discount_on_specific_products,
                    collections_array: discount_on_specific_collections,
                    entireStore_array: discount_on_entire_store
                }, function(result){
                    log("Product id:" + product_id);
                    log(result);
                    if(result.status === 1){
                        var html = calc_discount(result.final_result, original_price);
                        $("["+idAttr_selector+"='"+product_id+"']").html(html);
                        $("["+idAttr_selector+"='"+product_id+"']").removeAttr(idAttr_selector);
                        if (typeof WholesaleAllInOne.callback === "function") {
                            WholesaleAllInOne.callback({
                                event: "quantity_break_for_",
                                message: "Quantity break applied on this item",
                                data: result.final_result,
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                            });
                        }
                        else{
                            log("QB: No discount on this product id:" + product_id);
                            if (typeof WholesaleAllInOne.callback === "function") {
                              WholesaleAllInOne.callback({
                                event: "quantity_break_for_hcsrp",
                                message: "No qb discount on this product id",
                                data: [],
                                product_id: product_id,
                                variant_id: variant_id,
                                //config: config,
                                errors: null
                              });
                            }
                        }
                    }
                });
                }
                else{
                    log("QB: No discount on this product:" + product_id);
                    if (typeof WholesaleAllInOne.callback === "function") {
                        WholesaleAllInOne.callback({
                            event: "quantity_break_for_hcsrp",
                            message: "No qb discount on this product id",
                            data: [],
                            product_id: product_id,
                            variant_id: variant_id,
                            //config: config,
                            errors: null
                        });
                    }
                }
            });
        };

        // END HCSRP template

        // Additional coupon code apply
        function additionalCouponCodeForm(config){
            if(typeof config === "undefined") var config={};
            var textFieldStyle = config.textFieldStyle || null;
            if(textFieldStyle){
                textFieldStyle = "style="+textFieldStyle;
            }
            var buttonStyle = config.buttonStyle || null;
            if(buttonStyle){
                buttonStyle = "style="+buttonStyle;
            }
            var input = '<input type="text" '+textFieldStyle+' name="waio_coupon_code" placeholder="Discount code" class="'+waioSelectors.couponInputField.replace(".","").replace("#","")+'"></input><input type="button" '+buttonStyle+' value="'+waioTranslations.coupon_code_btn+'" name="waio_apply_coupon_code"></input>';
            if(WholesaleAIO.settings.enable_additional_coupon_code){
                $(waioSelectors.couponCodeForm).html(input);
            }
            $('input[name=waio_apply_coupon_code]').on("click", function(e){
                var code = $(this).siblings(waioSelectors.couponInputField).val().trim();
                if(code === ""){ return false;}
                var _self=$(this);
                _self.val("Apply");
                _self.prop('disabled', true);
                $(waioSelectors.additionalDiscountMsgClass).html("");
                var p_with_c = [];
                if(WholesaleAIO.template !== 'cart' && WholesaleAIO.template !== 'product'){
                    if(WholesaleAIO.productInCollects){
                        try{
                            var last_item = cart.items[0] || {};
                            var indexOfPC = WholesaleAIO.productInCollects.findIndex(function(x){return x.product_id==last_item.product_id});
                            var pc = -1<indexOfPC?WholesaleAIO.productInCollects[indexOfPC]:undefined;
                            if(typeof pc !== "undefined"){
                                pc.collection_ids.forEach(function(collection, i){
                                    p_with_c.push({
                                        product_id: last_item.product_id,
                                        collection_id:collection
                                    });
                                });
                            }
                        }catch(e){log(e)}
                    }
                }
                if(current_product_in_collections){
                    current_product_in_collections.forEach(function(collection, i){
                        p_with_c.push({
                            product_id: current_product.id,
                            collection_id:collection.id
                        });
                    });
                }
                p_with_c = products_with_collections.concat(p_with_c);
                req_apply_coupon_discount({
                    preview_mode: WholesaleAIO.previewMode(),
                    cart: cart,
                    shop: shop_domain,
                    customer_id: customer_id,
                    coupon_code_id: coupon_code_id,
                    coupon_code_entitled_ids: coupon_code_entitled_ids,
                    customer_tags: customer_tags,
                    customer: {id: customer_id, tags: customer_tags},
                    products_with_collections: p_with_c,
                    coupon_code: code,
                    products_with_collections: products_with_collections
                }, function(error, response){
                    if(response){
                        var waio = response.waio;
                        if(waio.status === 1){
                            var trackJson = [];
                            try{
                                if(localStorage.getItem("discount-tracking")){
                                    trackJson = JSON.parse(localStorage.getItem("discount-tracking")) || [];
                                }
                            }catch(e){log(e)}
                            if(code){
                                trackJson.push({
                                    "waio_ad": code,
                                    "shop": shopDomain
                                }); 
                            }
                            localStorage.setItem("discount-tracking", JSON.stringify(trackJson));
                            var codeData = {
                                code: code,
                                shop: shop_domain,
                            };
                            if(is_loggedIn){
                                codeData["customer_id"] = customer_id;
                            }
                            localStorage.setItem("ws-applied-coupon", JSON.stringify(codeData));
                            if(waio && typeof waio.app_final_subtotal !== "undefined"){
                                var afs = waio.app_final_subtotal;
                                if(typeof afs === "string"){
                                    afs = afs.replace(".","");
                                }
                                waioMOC.cart.original_total_price = afs;
                                WholesaleAllInOne.order_control();
                            }
                            if(Number(waio.coupon_discount) > 0){
                                setCartSubtotal({
                                  original_total_price: waio.app_subtotal,
                                  cart_subtotal: waio.app_final_subtotal,
                                  cart_total_price: waio.app_subtotal,
                                  cart: waio.response.cart,
                                  status: 1
                                });
                                additional_discount_applied_message({
                                    additional_discount: waio.additional_discount
                                });
                            }
                            coupon_code_id = waio.applied_coupon_id;
                            coupon_code_applied = code;
                            coupon_code_entitled_ids: waio.coupon_code_entitled_ids;
                            couponCodeAppliedAmountText(waio);
                            _self.prop('disabled', false);
                            _self.val(waioTranslations.coupon_code_btn);
                            if(Number(waio.app_discount) > 0){
                                cart_saved_amount_msg(waio);
                            }
                        }
                        else if(waio.status === 2){ // it indicated products isn't valid in cart
                            _self.prop('disabled', false);
                            _self.val(waioTranslations.coupon_code_btn);
                            invalid_coupon_code(waio.message);
                            reset_coupon_code_id();
                            setCartSubtotal({
                                original_total_price: waio.app_subtotal,
                                cart_subtotal: waio.app_final_subtotal,
                                cart_total_price: waio.app_subtotal,
                                cart: waio.response.cart,
                                status: 1
                            });
                        }
                        else{
                            _self.prop('disabled', false);
                            _self.val(waioTranslations.coupon_code_btn);
                            if(response.once_per_customer){
                                invalid_coupon_code("Coupon code limit is one use per customer, Please login.");
                            }
                            else{
                                invalid_coupon_code();
                            }
                            reset_coupon_code_id();
                            setCartSubtotal({
                                original_total_price: waio.app_subtotal,
                                cart_subtotal: waio.app_final_subtotal,
                                cart_total_price: waio.app_subtotal,
                                cart: waio.response.cart,
                                status: 1
                            });
                        }
                    }
                    else if(error){
                        _self.prop('disabled', false);
                        _self.val(waioTranslations.coupon_code_btn);
                        log(error);
                    }
                });
            });
        }

        function couponCodeAppliedAmountText(waio){
            var app_discount = WholesaleAIO.formatMoney(waio.coupon_discount,currency_format);
            var message = '<span class="coupon-discount-title">Coupon Discount:</span> -'+app_discount;
            var html = '<div class="waio-add-coupon-amount">'+message+'</div>';
            var el = $("["+waioSelectors.cartSubtotalPriceAttr+"]").parent();
            if($(".waio-add-coupon-amount").length > 0){
                $(".waio-add-coupon-amount").html(message);
            }
            else{
                $(html).insertBefore('p.cart_subtotal.js-cart_subtotal');
            }
        }

        function invalid_coupon_code(message){
            var inv_msg = message || "Enter a valid discount code";
            var html = '<span class="coupon_code_invalid_msg">'+inv_msg+'</span>';
            $(waioSelectors.additionalDiscountMsgClass).html(html);
        }

        function additional_discount_applied_message(data) {
            if(data.additional_discount){
                var html = '<span class="wholesale-additional-discount-applied"> Additional discount '+additional_amount(data.additional_discount)+' has been applied.</span>';
                $(waioSelectors.additionalDiscountMsgClass).html(html);
            }
        }

        function additional_amount(data){
            if(data.type === "percentage"){
                var a = (data.value).toString();
                if(a.indexOf(".") > -1){
                a = a.split(".")[0];
                }
                return a+"%";
            }
            else{
                return WholesaleAIO.formatMoney(data.value,currency_format);
            }
        }

        function req_apply_coupon_discount(data, callback){
            $.ajax({
                type: 'POST',
                url: app_url+'/discount/api/215/coupon-code',
                cache: false,
                data: data,
                success: function(result){
                    if("function" === typeof callback){
                        callback(null, result);
                    }
                },
                error: function(err){
                    if("function" === typeof callback){
                        callback(err, null);
                    }
                }
            });
        }

        function saleBadge(data){
            if("undefined"===typeof data)var data={};
            var $jscomp$destructuring$var0 = data, discount_type = $jscomp$destructuring$var0.discount_type, discount_value = $jscomp$destructuring$var0.discount_value, el = $jscomp$destructuring$var0.el, product_id = $jscomp$destructuring$var0.product_id, product_price = $jscomp$destructuring$var0.product_price, saleLabelHTML = $jscomp$destructuring$var0.saleLabelHTML, saleLabelMode = $jscomp$destructuring$var0.saleLabelMode, saleLabelPosition = $jscomp$destructuring$var0.saleLabelPosition;
            var savedAmount=WholesaleAIO.savedAmount(mF(product_price),discount_value,discount_type),saved_in_percent="",saved_fixed_amount="";
            savedAmount&&!savedAmount.error?(saved_in_percent=savedAmount.in_percent,saved_fixed_amount=savedAmount.fixed_amount):log("WAIO Warning","Saved amount not working as expected. Debug code to find out the bug or error.","warning");
            saved_fixed_amount = WholesaleAIO.priceFormat(saved_fixed_amount);
          	log("saved_in_percent",saved_in_percent);
          	log("saved_fixed_amount", WholesaleAIO.formatMoney(saved_fixed_amount));
            if(el.length <= 0){
                log("WAIO LOG:","Element not found for saved amount label");
            }
            var html = saleLabelHTML;
            if(saleLabelMode==="percent"){
                html = saleLabelHTML.replaceMeW("[[saved_amount]]", saved_in_percent);
            }
            else{
                html = saleLabelHTML.replaceMeW("[[saved_amount]]", WholesaleAIO.formatMoney(saved_fixed_amount));
            }
            switch(saleLabelPosition){
                case "append":
                    el.append(html);
                    break;
                case "prepend":
                    el.prepend(html);
                    break;
                case "before":
                    el.before(html);
                    break;
                case "after":
                    el.after(html);
                    break;
                default:
                    el.html(html);
                    break;
            }
        }

        function add_qb_discount__204(data, callback){
            var $jscomp$destructuring$var0 = data, qb = $jscomp$destructuring$var0.qb, discount_on_specific_products = $jscomp$destructuring$var0.discount_on_specific_products, discount_on_specific_collections = $jscomp$destructuring$var0.discount_on_specific_collections, discount_on_entire_store = $jscomp$destructuring$var0.discount_on_entire_store, discount_on_specific_variants = $jscomp$destructuring$var0.discount_on_specific_variants;
            var status = "rejected";
            switch(qb.qb_applies_to){
                case "selected_variants":
                if(WholesaleAIO.template === "product"){
                    try{
                        var find = qb.variants.findIndex(function(x){ return x.id == selected_variant_id });
                        if(find > -1){
                            status = "approved";
                        }
                    }catch(e){log(e)}
                }
                break;
                case "selected_products":
                if(WholesaleAIO.template === "product"){
                    try{
                        var find = qb.products.findIndex(function(x){ return x.id == current_product.id });
                        if(find > -1){
                            status = "approved";
                        }
                    }catch(e){log(e)}
                }
                else{
                    status = "approved";
                }
                break;
                case 'selected_collections':
                log("selected_collections template " + WholesaleAIO.template);
                if(WholesaleAIO.template === "product"){
                    if(current_product_in_collections.length > 0){
                        for(var iter = 0; iter < current_product_in_collections.length; iter++){
                            var col = current_product_in_collections[iter];
                            try{
                                if(qb.collections.findIndex(function(x){return x.id == col.id}) > -1){
                                    status = "approved"; break;
                                }
                                else if(qb.collections.findIndex(function(x){return x.id == col.collection_id}) > -1){
                                    status = "approved"; break;
                                }
                            }catch(e){log(e)}
                        }
                    }
                    else{
                        log("WAIO LOG!" , "Current product's collections not found!","warning")
                    }
                }
                else{
                    if(collection_id){
                        try{
                            if(qb.collections.findIndex(function(x){return x.id == collection_id }) > -1){
                                status = "approved";
                            }
                        }catch(e){log(e)}
                    }
                    else if(collection_handle == "all"){
                        if(discount_on_specific_collections.length == 0){
                            status = "approved";
                        }
                        log("WAIO message: All collections rendered!")
                    }
                    else{
                        if(discount_on_specific_collections.length == 0){
                            status = "approved";
                        }
                        log("WAIO message: Current collection's id not found!","warning")
                    }
                }
                break;
                case 'entire_store':
                if(WholesaleAIO.template !== "product"){
                    if(discount_on_specific_collections.length === 0 && discount_on_specific_products.length === 0 && discount_on_specific_variants.length === 0){
                        status = "approved";
                    }
                }
                else{
                    if(discount_on_specific_collections.length === 0){
                        status = "approved";
                    }
                    {%if template.name == 'index' or template.name == 'search'%}
                    status = "approved";
                    {%endif%}
                }
                break;
                default:
                break;
            }
            callback({type:qb.qb_applies_to,status:status})
        }

        function get_relivant_qb_rule_204(data, callback){
            var $jscomp$destructuring$var0 = data, variant_id = $jscomp$destructuring$var0.variant_id, product_id = $jscomp$destructuring$var0.product_id, variants_array = $jscomp$destructuring$var0.variants_array, products_array = $jscomp$destructuring$var0.products_array, collections_array = $jscomp$destructuring$var0.collections_array, entireStore_array = $jscomp$destructuring$var0.entireStore_array;
            var final_result = [];
            for(var iter = 0; iter < variants_array.length; iter++){ // va for variants array
                var va = variants_array[iter];
                if(va.variants.findIndex(function(x){return x.id == variant_id }) > -1){
                    if(typeof final_result.customers_group !== "undefined"){
                        switch(va.customers_group){
                        case "tagged_customer":
                            if(final_result.customers_group != "tagged_customer"){
                                final_result = va;
                            }
                            break;
                        case "only_logged_in_customers":
                            if(final_result.customers_group != "tagged_customer"){
                                final_result = va;
                            }
                            break;
                        case "all":
                            if(final_result.customers_group != "tagged_customer" && final_result.customers_group != "only_logged_in_customers"){
                                final_result = va;
                            }
                            break;
                        default:
                            break;
                        }
                    }
                    else{
                        final_result = va;
                    }
                }
            }
            for(var iter = 0; iter < products_array.length; iter++){ // pa for products array
                var pa = products_array[iter];
                if(pa.products.findIndex(function(x){return x.id == product_id }) > -1){
                if(typeof final_result.customers_group !== "undefined"){
                    if(final_result.applies_to === "selected_variants") break;
                    switch(pa.customers_group){
                    case "tagged_customer":
                        if(final_result.customers_group != "tagged_customer"){
                        final_result = pa;
                        }
                        break;
                    case "only_logged_in_customers":
                        if(final_result.customers_group != "tagged_customer"){
                        final_result = pa;
                        }
                        break;
                    case "all":
                        if(final_result.customers_group != "tagged_customer" && final_result.customers_group != "only_logged_in_customers"){
                        final_result = pa;
                        }
                        break;
                    default:
                        break;
                    }
                }
                else{
                    final_result = pa;
                }
                }
            }
            for(var iter = 0; iter < collections_array.length; iter++){
                var ca = collections_array[iter]; // ca for collection array
                // if(ca.excluded_products.findIndex(function(c){return c.id == product_id}) > -1){continue;}
                if(WholesaleAIO.template == "collection" || WholesaleAIO.template == "search" || WholesaleAIO.template == "index"){
                var find = productInCollects.findIndex(function(x){ return x.product_id == product_id });
                if(find > -1){
                    for(var iter1 = 0; iter1 < productInCollects[find].collection_ids.length; iter1++){
                        var coll_id = productInCollects[find].collection_ids[iter1];
                        if(ca.collections.findIndex(function(x){return x.id == coll_id}) > -1){
                            if(typeof final_result.customers_group !== "undefined"){
                            if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                            switch(ca.customers_group){
                                case "tagged_customer":
                                if(final_result.customers_group != "tagged_customer"){
                                    final_result = ca;
                                }
                                break;
                                case "only_logged_in_customers":
                                if(final_result.customers_group != "tagged_customer"){
                                    final_result = ca;
                                }
                                break;
                                default:
                                break;
                            }
                            }
                            else{
                            final_result = ca;
                            }
                            break;
                        }
                    } // end for loop
                }
                else{
                    {% if template.name == 'index' %}
                    for(var iteru = 0; iteru < products_with_collections.length; iteru++){
                        var value = products_with_collections[iteru];
                        if(ca.collections.findIndex(function(x){return x.id == value.collection_id}) > -1 && value.product_id == product_id ){
                            if(typeof final_result.customers_group !== "undefined"){
                                if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                                    switch(ca.customers_group){
                                        case "tagged_customer":
                                            if(final_result.customers_group != "tagged_customer"){
                                                final_result = ca;
                                            }
                                            break;
                                        case "only_logged_in_customers":
                                            if(final_result.customers_group != "tagged_customer"){
                                                final_result = ca;
                                            }
                                            break;
                                        default:
                                        break;
                                    }
                                }
                                else{
                                    final_result = ca;
                                }
                            }
                        }
                        {%endif%}
                    } // end for loop
                }
                else if(WholesaleAIO.template == "product"){
                    for(var iter = 0; iter < current_product_in_collections.length; iter++){
                        var col = current_product_in_collections[iter];
                        var findOne = ca.collections.findIndex(function(x){return x.id == col.id}) > -1;
                        var findTwo = ca.collections.findIndex(function(x){return x.id == col.collection_id}) > -1;
                        if(findOne || findTwo){
                            if(typeof final_result.customers_group !== "undefined"){
                                if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                                switch(ca.customers_group){
                                case "tagged_customer":
                                    if(final_result.customers_group != "tagged_customer"){
                                    final_result = ca;
                                    }
                                    break;
                                case "only_logged_in_customers":
                                    if(final_result.customers_group != "tagged_customer"){
                                    final_result = ca;
                                    }
                                    break;
                                default:
                                    break;
                                }
                            }
                            else{
                                final_result = ca;
                            }
                            break;
                        }
                    } // end for loop
                }
                else{
                if(ca.collections.findIndex(function(x){return x.id == homePageCollection.id}) > -1){
                    if(typeof final_result.customers_group !== "undefined"){
                    if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                        switch(ca.customers_group){
                            case "tagged_customer":
                            if(final_result.customers_group != "tagged_customer"){
                                final_result = ca;
                            }
                            break;
                            case "only_logged_in_customers":
                            if(final_result.customers_group != "tagged_customer"){
                                final_result = ca;
                            }
                            break;
                            default:
                            break;
                        }
                    }
                    else{
                        final_result = ca;
                    }
                    break;
                }
                }
            }
            for(var iter = 0; iter < entireStore_array.length; iter++){
                var esa = entireStore_array[iter];// esa for entire store array
                if(typeof final_result.customers_group === "undefined"){
                    final_result = esa;
                }
            }
            var status = typeof final_result.customers_group !== "undefined"?1:0;
            callback({status:status,final_result:final_result});
        }

        function create__table_grid(data){
            data.product_discount_array.forEach( function(product){
            if(product_qb_applied){
                return false; // break the loop
            }
            var clockId = 'wholesale-ends-notification__es';
            var table_Id = 'wholesale-table__es';
            $(".wholesale-table").remove();
            $("#"+table_Id).remove();
            switch (product.display_option) {
            case "detailed_grid":
                detailed_grid(product,data, table_Id);
                break;
            case "basic_grid":
                basic_grid(product,data, table_Id);
                break;
            case "grid_range":
                grid_range(product,data, table_Id);
                break;
            case "detailed_grid_percent":
                detailed_grid_percent(product,data, table_Id);
                break;
            case "percent_grid":
                percent_grid(product,data, table_Id);
                break;
            case "grid_range_alternate":
                grid_range_alternate(product,data, table_Id);
                break;
            default:
                grid_range_alternate(product,data, table_Id);
                break;
            }
           	if(product.schedule_active){
                $("#wholesale-ends-notification").remove();
                $(".wholesale-ends-notification").remove();
                run_schedule_clock(product.schedule);
            }
        });
        }

        function productTemplateGetIds(callback){
            var productAttribute = $('[class^="waio"],[class*="waio"]');
            if(productAttribute.length > 0){
                var elClass = productAttribute.attr("class");
                var productHTML = productAttribute;
                if(elClass){
                    try{
                        var newClass = null;
                        elClass = elClass.split(" ");
                        if(elClass.length > 0){
                            for(var iter = 0; iter < elClass.length; iter++){
                                if(elClass[iter].indexOf("waio_") > -1){
                                    newClass = elClass[iter]; break;
                                }
                            }
                        }
                    }catch(e){log(e)}
                        log("newClass", newClass);
                }
                if(newClass!==null){
                    newClass = newClass.split("_");
                }
                if(newClass && newClass.length > 0){
                    if(newClass[0] !== "waio" ){
                        log("Class","Class attribute missing","warning")
                    }
                }
                else{
                    newClass = {};
                }
                var product_id = newClass[1];
                var variant_id = newClass[2];
                callback({
                    product_id: product_id,
                    variant_id: variant_id,
                    el: productHTML
                });
            }
            else{
                callback({
                    product_id: null,
                    variant_id: null,
                    el: null
                });
            }
        }

        function run_schedule_clock(rule){
            //Sale end notification
            if(WholesaleAIO.settings.sale_clock.show_sale_clock){
                $("<div id='wholesale-ends-notification' class='wholesale-ends-notification'></div>").insertAfter(waioSelectors.addToCart);
                if(rule.schedule){
                    schedule_ends_in(rule.schedule);
                }
                else{
                    schedule_ends_in(rule);
                }
            }
            else{
                log("Wholesale Schedule Clock","was disabled","warning");
            }
        }

        function schedule_ends_in(item){
          try{
            if(item && item.end_date){
              countDown({
                sale_clock: WholesaleAIO.settings.sale_clock,
                item: item,
                clockId: 'wholesale-ends-notification',
                styled: true,
                showMsg: true
              });
            }
            else{
              log("Error in item.end_date",item);
            }
          }catch(e){
            log(e);
          }
        }

        function countDown(data){
            if(data && data.item.end_date){
                var est_time = JSON.parse(sessionStorage.getItem('est_time'));
                if(est_time != null && global_counter > 0){
                countDownClock({
                    est_time: est_time,
                    sale_clock: data.sale_clock,
                    item: data.item,
                    clockId: data.clockId,
                    styled: data.styled,
                    showMsg: data.showMsg
                });
                }
                else{
                    get_est_time(function(err,time){
                        if(time){
                            sessionStorage.removeItem('est_time');
                            var set = sessionStorage.setItem('est_time', JSON.stringify(time.current_est_time));
                            countDownClock({
                                est_time: time.current_est_time,
                                sale_clock: data.sale_clock,
                                item: data.item,
                                clockId: data.clockId,
                                styled: data.styled,
                                showMsg: data.showMsg
                            });
                        }
                        else{
                            log(err);
                        }
                    });
                }
            }
            global_counter++;
        }

        function countDownClock(data){
            var sale_clock = data.sale_clock,
                item = data.item,
                clockId = data.clockId,
                styled = data.styled,
                est_time = data.est_time,
                showMsg = data.showMsg;
            var start = new Date(est_time.year,est_time.month,est_time.date,est_time.hours,est_time.minutes,est_time.seconds,est_time.milliseconds);
            var end = new Date(((item.end_date).split(' ')[0]).replace(/-/g, '/')+" "+item.end_time_est);
            if(end == 'Invalid Date'){
                if(item.end_date.indexOf('T') > -1){
                var _s = ((item.end_date).split('T')[0]).replace(/-/g, '/');
                end = new Date(_s+" "+item.end_time_est);
                }
                else{
                end = new Date(item.end_date);
                }
            }
            window.interval;
            for (var i = 1; i <= window.interval; i++) {window.clearInterval(i);}
            var result;
            var clockID = document.getElementById(clockId);
            try{
                if(typeof start !== 'object' || typeof end !== 'object'){return undefined; }
                if(start > end){
                    return undefined;
                }
            start = start.getTime();
            end = end.getTime();
            var timeSpan = end - start;
            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(timeSpan / (1000 * 60 * 60 * 24));
            var hours = Math.floor((timeSpan % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((timeSpan % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((timeSpan % (1000 * 60)) / 1000);
            result = {
            days: days,
            hours: hours,
            minutes: minutes,
            seconds: seconds
            };

            if(result.seconds < 0){
            result.minutes--;
            result.seconds += 60;
            }
            if(result.minutes < 0){
            result.hours--;
            result.minutes += 60;
            }
            if(result.hours < 0){
            result.days--;
            result.hours += 24;
            }
            if(result.days > 0 || result.hours > 0 || result.minutes > 0 || result.seconds > 0){
            if(sale_clock.sale_clock_type == '1' || sale_clock.sale_clock_type == '8' || sale_clock.sale_clock_type == '9'){
                interval = setInterval(startCountDown,1000); // run the countdown
            }
            else{
                setCountDownClock({
                result: result,
                sale_clock: sale_clock,
                est_time: item,
                clockId: clockId,
                styled: styled,
                showMsg: showMsg,
                item: item,
                est_time: est_time
                });
            }
            }
            function startCountDown(){
            result.seconds--;
            if(result.seconds < 0){
                result.minutes--;
                result.seconds += 60;
            }
            if(result.minutes < 0){
                result.hours--;
                result.minutes += 60;
            }
            if(result.hours < 0){
                result.days--;
                result.hours += 24;
            }
            if(result.days <= 0 && result.hours <= 0 && result.minutes <= 0 && result.seconds <= 0){
                clearInterval(interval);
                if(clockID == null){
                $("#"+clockId).html("");
                }
                else{
                clockID.innerHTML = '';//Sale expired
                }
            }
            else{
                setCountDownClock({
                result:result,
                sale_clock:sale_clock,
                est_time:item,
                clockId:clockId,
                styled:styled,
                showMsg: showMsg,
                item: item,
                est_time: est_time
                });
            }
            }
            return result;
        }
            catch(e){
                clearInterval(interval);
                clockId.innerHTML = '';
            }
        }
        function getTimezoneOffset() {
            function z(n){return (n<10? '0' : '') + n}
            var offset = new Date().getTimezoneOffset();
            var sign = offset < 0? '+' : '-';
            offset = Math.abs(offset);
            return sign + z(offset/60 | 0) + z(offset%60);
        }

        function estDateTime(date,time){
            try{
                var dateTimeValue = new Date(date);
                if(typeof dateTimeValue == 'object'){
                    dateTimeValue = dateTimeValue.toString();
                    if(typeof dateTimeValue == 'string'){
                        dateTimeValue = dateTimeValue.replace(getTimezoneOffset(), '+0000');
                    }
                }
                dateTimeValue = new Date(dateTimeValue).toISOString();
                dateTimeValue = (dateTimeValue.split('T')[0]).replace(/-/g, '/') + " " +time;
                return dateTimeValue;
            }catch(e){
                log(e);
            }
        }

        function setCountDownClock(data){
            var result = data.result,
                sale_clock = data.sale_clock,
                est_time = data.est_time,
                clockId = data.clockId,
                styled = data.styled,
                showMsg = data.showMsg,
                item = data.item;
            var ends_message = '';
            var ends_on = result;
            var CLOCKID = document.getElementById(clockId);
            //if($("#"+clockId).length <=0){$(waioSelectors.addToCart).append("<div id='"+clockId+"' class='wholesale-ends-notification'></div>");}
            switch(sale_clock.sale_clock_type){
                case '1':
                if(ends_on.days > 0){
                    ends_message += ends_on.days+(ends_on.days == 1?'day, ':'days, ');
                }
                if(ends_on.hours > 0){
                    ends_message += ends_on.hours+(ends_on.hours == 1?'hour, ':'hours, ');
                }
                if(ends_on.minutes > 0){
                    var minutes = ends_on.minutes;
                    if(minutes < 10){minutes = '0'+minutes;}
                    ends_message += minutes+(ends_on.minutes == 1?'minute, ':'minutes, ');
                }
                if(ends_on.seconds >= 0){
                    var seconds = ends_on.seconds;
                    if(seconds < 10){seconds = '0'+seconds;}
                    ends_message += '<span class="WhtSec">'+seconds+'</span>'+(ends_on.seconds <= 1?'second':'seconds');
                }
                break;
                case '2':
                if(ends_on.days > 0){
                    ends_message += ends_on.days+(ends_on.days == 1?' day':' days');
                }
                else if(ends_on.days == 0){
                    if(ends_on.hours > 0){
                    ends_message += ends_on.hours+(ends_on.hours == 1?'hour':'hours');
                    }
                }
                else{
                    ends_message += "";
                }
                break;
                case '3':
                var options = { timeZone:'America/New_York', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric',hour:'numeric' ,minute:'numeric',second:'numeric' };
                ends_message += new Date(estDateTime(item.end_date,item.end_time_est)).toLocaleDateString('en-UK', options);
                break;
                case '4':
                var options = { timeZone:'America/New_York', weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'};
                ends_message += new Date(estDateTime(item.end_date,item.end_time_est)).toLocaleDateString('en-UK', options);
                break;
                case '5':
                var options = { timeZone:'America/New_York', year: 'numeric', month: 'long', day: 'numeric'};
                ends_message += new Date(estDateTime(item.end_date,item.end_time_est)).toLocaleDateString('en-UK', options);
                break;
                case '6':
                var options = { timeZone:'America/New_York', year: 'numeric', month: 'short', day: 'numeric',hour:'numeric' ,minute:'numeric',second:'numeric' };
                ends_message += new Date(estDateTime(item.end_date,item.end_time_est)).toLocaleDateString('en-UK', options);
                break;
                case '7':
                var options = { timeZone:'America/New_York', year: 'numeric', month: 'short', day: 'numeric'};
                ends_message += new Date(estDateTime(item.end_date,item.end_time_est)).toLocaleDateString('en-UK', options);
                break;
                case '8':
                if(ends_on.days > 0){
                    ends_message += ends_on.days+'d:';
                }
                if(ends_on.hours > 0){
                    ends_message += ends_on.hours+'h:';
                }
                if(ends_on.minutes > 0){
                    var minutes = ends_on.minutes;
                    if(minutes < 10){minutes = '0'+minutes;}
                    ends_message += minutes+'m:';
                }
                if(ends_on.seconds >= 0){
                    var seconds = ends_on.seconds;
                    if(seconds < 10){seconds = '0'+seconds;}
                    ends_message += '<span class="WhtSec">'+seconds+'</span>'+'s';
                }
                break;
                case '9':
                if(ends_on.days > 0){
                    ends_message += ends_on.days+(ends_on.days == 1?'day ':'days ');
                }
                if(ends_on.hours > 0){
                    ends_message += ends_on.hours+(ends_on.hours == 1?'hour ':'hours ');
                }
                if(ends_on.minutes > 0){
                    var minutes = ends_on.minutes;
                    if(minutes < 10){minutes = '0'+minutes;}
                    ends_message += minutes+(ends_on.minutes == 1?'minute ':'minutes ');
                }
                if(ends_on.seconds >= 0){
                    var seconds = ends_on.seconds;
                    if(seconds < 10){seconds = '0'+seconds;}
                    ends_message += '<span class="WhtSec">'+seconds+'</span>'+(ends_on.seconds <= 1?'second':'seconds');
                }
                break;
                default:
                if(ends_on.days > 0){
                    ends_message += ends_on.days+'d';
                }
                if(ends_on.hours > 0){
                    ends_message += ends_on.hours+'h';
                }
                if(ends_on.minutes > 0){
                    var minutes = ends_on.minutes;
                    if(minutes < 10){minutes = '0'+minutes;}
                    ends_message += minutes+'m '
                }
                if(ends_on.seconds >= 0){
                    var seconds = ends_on.seconds;
                    if(seconds < 10){seconds = '0'+seconds;}
                    ends_message += '<span class="WhtSec">'+seconds+'</span>'+'s';
                }
            }
            if(ends_message !== ''){
            if(showMsg){
            ends_message = sale_clock.sale_clock_text1+' '+ends_message+''+sale_clock.sale_clock_text2;
            }
            var s = sale_clock.style;
            var style = 'background:'+(s.hex_bg_color?s.hex_bg_color:'hsla('+s.bg_color[0].hue+','+s.bg_color[0].saturation*100+'%,'+s.bg_color[0].brightness*100+'%,1)')+';color:'+(s.hex_fg_color?s.hex_fg_color:'hsla('+s.fg_color[0].hue+','+s.fg_color[0].saturation*100+'%,'+s.fg_color[0].brightness*100+'%,1)')+';font-size:'+s.font_size+'px;border-radius:'+s.border_radius+'px;text-align:'+s.text_align+';padding:'+s.padding+';line-height:initial;';
            var inte;
            if(CLOCKID == null){
            inte = setInterval(showClockImediately,1000);
            }
            else{
            if(styled){
                CLOCKID.innerHTML = "<div style='"+style+"'>"+ends_message+"<div>";
            }
            else{
                CLOCKID.innerHTML = ends_message;
            }
            }
            function showClockImediately(){
            if(styled){
                $("#"+clockId).html("<div style='"+style+"'>"+ends_message+"<div>");
            }
            else{
                $("#"+clockId).html(ends_message);
            }
            clearInterval(inte);
            }
        }
        }

        function add_discount__v202(data, callback){
            var $jscomp$destructuring$var0 = data, dg = $jscomp$destructuring$var0.dg, discount_on_specific_products = $jscomp$destructuring$var0.discount_on_specific_products, discount_on_specific_collections = $jscomp$destructuring$var0.discount_on_specific_collections, discount_on_entire_store = $jscomp$destructuring$var0.discount_on_entire_store, discount_on_specific_variants = $jscomp$destructuring$var0.discount_on_specific_variants, render_for = $jscomp$destructuring$var0.render_for, status = "rejected";
            switch(dg.applies_to){
                case "specific_variants":
                if(WholesaleAIO.template === "product"){
                    if(dg.variants.findIndex(function(x){ return x.id == selected_variant_id }) > -1){
                    status = "approved";
                    }
                }
                break;
                case "specific_products":
                if(WholesaleAIO.template === "product"){
                    if(dg.products.findIndex(function(x){ return x.id == current_product.id }) > -1){
                    status = "approved";
                    }
                }
                else{
                    status = "approved";
                }
                break;
                case 'specific_collections':
                if(render_for === "hcsrp"){
                    status = "approved";
                }
                else{
                if(WholesaleAIO.template === "index"){
                    if(typeof homePageCollection === 'object' && homePageCollection.id){
                    if(dg.collections.findIndex(function(x){return x.id == homePageCollection.id}) > -1){
                        status = "approved";
                    }
                    }
                    else{
                        log("WAIO message: Home page collection's is not found!","warning");
                    }
                }
                else if(WholesaleAIO.template === "product"){
                    if(current_product_in_collections.length > 0){
                        for(var iter = 0; iter < current_product_in_collections.length; iter++){
                            var col = current_product_in_collections[iter];
                            if(dg.collections.findIndex(function(x){return x.id == col.id}) > -1){
                                status = "approved"; break;
                            }
                            else if(dg.collections.findIndex(function(x){return x.id == col.collection_id}) > -1){
                                status = "approved"; break;
                            }
                        }
                    }
                    else{
                    log("WAIO LOG!", "Current product's collections not found!","warning")
                    }
                }
                else{
                    if(collection_id){
                    if(dg.collections.findIndex(function(x){return x.id == collection_id }) > -1){
                        status = "approved";
                    }
                    }
                    else if(collection_handle == "all"){
                    if(discount_on_specific_collections.length == 0){
                        status = "approved";
                    }
                    log("WAIO message: All collections rendered!")
                    }
                    else{
                    if(discount_on_specific_collections.length == 0){
                        status = "approved";
                    }
                    log("WAIO message: Current collection's id not found!")
                    }
                    }
                }
                break;
                case 'entire_store':
                if(WholesaleAIO.template === "product"){
                    if(discount_on_specific_collections.length == 0 && discount_on_specific_products.length == 0 && discount_on_specific_variants.length == 0){
                    status = "approved";
                    }
                }
                else{
                    if(discount_on_specific_collections.length === 0){
                    status = "approved";
                    }
                    {%if template.name == 'index' or template.name == 'search'%}
                    status = "approved";
                    {%endif%}
                }
                break;
                default:
                break;
            }
            callback({type:dg.applies_to,status:status})
        }

        function get_relivant_rule_v202(data, callback){
            var $jscomp$destructuring$var0 = data, variant_id = $jscomp$destructuring$var0.variant_id, product_id = $jscomp$destructuring$var0.product_id, variants_array = $jscomp$destructuring$var0.variants_array, products_array = $jscomp$destructuring$var0.products_array, collections_array = $jscomp$destructuring$var0.collections_array, entireStore_array = $jscomp$destructuring$var0.entireStore_array, collectionsIds = $jscomp$destructuring$var0.collectionsIds;
            var final_result = [];
            for(var iter = 0; iter < variants_array.length; iter++){
                var va = variants_array[iter]; // va for variants array
                if(va.variants.findIndex(function(x){return x.id == variant_id }) > -1){
                    if(typeof final_result.customers_group !== "undefined"){
                        switch(va.customers_group){
                        case "tagged_customer":
                            if(final_result.customers_group != "tagged_customer"){
                            final_result = va;
                            }
                            break;
                        case "only_logged_in_customers":
                            if(final_result.customers_group != "tagged_customer"){
                            final_result = va;
                            }
                            break;
                        case "all":
                            if(final_result.customers_group != "tagged_customer" && final_result.customers_group != "only_logged_in_customers"){
                            final_result = va;
                            }
                            break;
                        default:
                            break;
                        }
                    }
                    else{
                        final_result = va;
                    }
                }
            }// end for loop
            for(var iter = 0; iter < products_array.length; iter++){
                var pa = products_array[iter]; // pa for products array
                if(pa.products.findIndex(function(x){return x.id == product_id }) > -1){
                if(typeof final_result.customers_group !== "undefined"){
                    if(final_result.applies_to === "specific_variants") break;
                    switch(pa.customers_group){
                    case "tagged_customer":
                        if(final_result.customers_group != "tagged_customer"){
                        final_result = pa;
                        }
                        break;
                    case "only_logged_in_customers":
                        if(final_result.customers_group != "tagged_customer"){
                        final_result = pa;
                        }
                        break;
                    case "all":
                        if(final_result.customers_group != "tagged_customer" && final_result.customers_group != "only_logged_in_customers"){
                        final_result = pa;
                        }
                        break;
                    default:
                        break;
                    }
                }
                else{
                    final_result = pa;
                }
                }
            }
            for(var iter = 0; iter < collections_array.length; iter++){
                var ca = collections_array[iter]; // ca for collection array
                if(ca.excluded_products.findIndex(function(c){return c.id == product_id}) > -1){continue;}
                if(WholesaleAIO.template == "collection" || WholesaleAIO.template == "search" || WholesaleAIO.template == "index"){
                var find = productInCollects.findIndex(function(x){ return x.product_id == product_id });
                if(find > -1){
                    for(var iter1 = 0; iter1 < productInCollects[find].collection_ids.length; iter1++){
                        var coll_id = productInCollects[find].collection_ids[iter1];
                        if(ca.collections.findIndex(function(x){return x.id == coll_id}) > -1){
                            if(typeof final_result.customers_group !== "undefined"){
                            if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                            switch(ca.customers_group){
                                case "tagged_customer":
                                if(final_result.customers_group != "tagged_customer"){
                                    final_result = ca;
                                }
                                break;
                                case "only_logged_in_customers":
                                if(final_result.customers_group != "tagged_customer"){
                                    final_result = ca;
                                }
                                break;
                                default:
                                break;
                            }
                            }
                            else{
                            final_result = ca;
                            }
                            break;
                        }
                    } // end for loop
                }
                else if(collectionsIds){
                    collectionsIds = collectionsIds.toString().split(",");
                    for(var itery = 0; itery < collectionsIds.length; itery++){
                        var collect = collectionsIds[itery];
                        if(ca.collections.findIndex(function(x){return x.id == collect}) > -1){
                            if(typeof final_result.customers_group !== "undefined"){
                                if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                                switch(ca.customers_group){
                                    case "tagged_customer":
                                    if(final_result.customers_group != "tagged_customer"){
                                        final_result = ca;
                                    }
                                    break;
                                    case "only_logged_in_customers":
                                    if(final_result.customers_group != "tagged_customer"){
                                        final_result = ca;
                                    }
                                    break;
                                    default:
                                    break;
                                }
                            }
                            else{
                                final_result = ca;
                            }
                        }
                    }
                }
                else{
                    {% if template.name == 'index' %}
                    for(var iter = 0; iter < products_with_collections.length; iter++){
                        var value = products_with_collections[iter];
                        if(ca.collections.findIndex(function(x){return x.id == value.collection_id}) > -1 && value.product_id == product_id ){
                            if(typeof final_result.customers_group !== "undefined"){
                                if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                                    switch(ca.customers_group){
                                        case "tagged_customer":
                                        if(final_result.customers_group != "tagged_customer"){
                                            final_result = ca;
                                        }
                                        break;
                                        case "only_logged_in_customers":
                                        if(final_result.customers_group != "tagged_customer"){
                                            final_result = ca;
                                        }
                                        break;
                                        default:
                                        break;
                                    }
                                }
                                else{
                                    final_result = ca;
                                }
                            }
                        }
                        {%endif%}
                    }
                }
                else if(WholesaleAIO.template == "product"){
                for(var iter = 0; iter < current_product_in_collections.length; iter++){
                    var col = current_product_in_collections[iter];
                    var findOne = ca.collections.findIndex(function(x){return x.id == col.id}) > -1;
                    var findTwo = ca.collections.findIndex(function(x){return x.id == col.collection_id}) > -1;
                    if(findOne || findTwo){
                        if(typeof final_result.customers_group !== "undefined"){
                            if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                            switch(ca.customers_group){
                            case "tagged_customer":
                                if(final_result.customers_group != "tagged_customer"){
                                final_result = ca;
                                }
                                break;
                            case "only_logged_in_customers":
                                if(final_result.customers_group != "tagged_customer"){
                                final_result = ca;
                                }
                                break;
                            default:
                                break;
                            }
                        }
                        else{
                            final_result = ca;
                        }
                        break;
                    }
                } // end for loop
                }
                else{
                if(ca.collections.findIndex(function(x){return x.id == homePageCollection.id}) > -1){
                    if(typeof final_result.customers_group !== "undefined"){
                    if(final_result.applies_to === "specific_products" || final_result.applies_to === "specific_variants") break;
                    switch(ca.customers_group){
                        case "tagged_customer":
                        if(final_result.customers_group != "tagged_customer"){
                            final_result = ca;
                        }
                        break;
                        case "only_logged_in_customers":
                        if(final_result.customers_group != "tagged_customer"){
                            final_result = ca;
                        }
                        break;
                        default:
                        break;
                    }
                    }
                    else{
                    final_result = ca;
                    }
                    break;
                }
                }
            }
            for(var iter = 0; iter < entireStore_array.length; iter++){
                var esa = entireStore_array[iter];// esa for entire store array
                if(esa.excluded_products.findIndex(function(c){return c.id == product_id}) > -1){continue;}
                var find = productInCollects.findIndex(function(x){ return x.product_id == product_id });
                var excluded = false;
                if(find > -1){
                    for(var iter1 = 0; iter1 < esa.excluded_collections.length; iter1++){
                        var ex = esa.excluded_collections[iter1];
                        var findColl = productInCollects[find].collection_ids.findIndex(function(x){return x == ex.id});
                        if(findColl > -1){
                            excluded = true;
                        }
                    }
                }
                if(collectionsIds){
                    collectionsIds = collectionsIds.toString().split(",");
                    for(var iter2 = 0; iter2 < collectionsIds.length; iter2++){
                        var collect = collectionsIds[iter2];
                        if(esa.excluded_collections.findIndex(function(x){return x.id == collect}) > -1){
                            excluded = true;
                        }
                    }
                }
                if(excluded){break;}
                if(typeof final_result.customers_group === "undefined"){
                    final_result = esa;
                }
            }
            var status = typeof final_result.customers_group !== "undefined"?1:0;
            callback({status:status,final_result:final_result});
        }

        function cart_subtotal__price(discount){
            return mF(Number(discount.cart_subtotal)) - Number(discount.total_discount);
        }

        function product_total__price(product){
            return mF(Number(product.line_price));
        }

        function product_discounted__price(product){
            return decimal(mF(Number(product.line_price)) - product.total_discount);
        }

        function updatePriceHTML(params){
            var $jscomp$destructuring$var0 = params, template = $jscomp$destructuring$var0.template, discountType = $jscomp$destructuring$var0.discountType, discountValue = $jscomp$destructuring$var0.discountValue, productPrice = $jscomp$destructuring$var0.productPrice, compareAtPrice = $jscomp$destructuring$var0.compareAtPrice, productId = $jscomp$destructuring$var0.productId, priceElement = $jscomp$destructuring$var0.priceElement, html_contents = $jscomp$destructuring$var0.html_contents, pIdAttrSelector = $jscomp$destructuring$var0.pIdAttrSelector;
            var discount = 0;
            var wholesalePrice = productPrice;
            var productPriceCurrencyFormat=currency_format,wholesalePriceCurrencyFormat=currency_format,savedPriceCurrencyFormat=currency_format;
            switch(discountType){
                case "percentage":
                    discount = WholesaleAIO.priceFloat(( Number(mF(Number(productPrice)) * Number(mF(Number(discountValue))))/100).toString());
                	wholesalePrice = (Number(productPrice)) - WholesaleAIO.priceFormat(Number(discount));
                    log("Discount ",discount);
                    log("Wholesale Price ",wholesalePrice);
                    log("Product Price ",productPrice);
                    break;
                case "fixed_price":
                    if(Number(productPrice) > Number(discountValue)){
                        wholesalePrice = discountValue;
                    }
                    else{
                        wholesalePrice = productPrice;
                    }
                    break;
                case "price_discount":
                    if(Number(productPrice) < Number(discountValue)){
                        wholesalePrice = 0;
                    }
                    else{
                        wholesalePrice = Number(productPrice) - Number(discountValue);
                    }
                    break;
                default:
                    log("WAIO Warning!","Discount type is not recognized.", "warning");
                    break;
            }
            if(WholesaleAIO.settings.show_compare_at_price){
                if(compareAtPrice && !isNaN(compareAtPrice)){
                    productPrice=compareAtPrice;
                }
            }
            var savedAmount=WholesaleAIO.savedAmount2(mF(productPrice),mF(wholesalePrice)),saved_in_percent="",saved_fixed_amount="";
            log("WAIO LOG! saved amount results",savedAmount);
            savedAmount&&!savedAmount.error?(saved_in_percent=savedAmount.in_percent,saved_fixed_amount=savedAmount.fixed_amount):log("WAIO Warning","Saved amount not working as expected. Debug code to find out the bug or error.","warning");
            if(WholesaleAIO.settings.hide_cents){
                if(parseFloat(productPrice) % 1 === 0) productPriceCurrencyFormat = currency_format_without_demical;
                if(parseFloat(wholesalePrice) % 1 === 0) wholesalePriceCurrencyFormat = currency_format_without_demical;
                if(parseFloat(saved_fixed_amount) % 1 === 0) savedPriceCurrencyFormat = currency_format_without_demical;
            }
            if(!WholesaleAIO.settings.compare_at_price || Number(wholesalePrice) >= Number(productPrice)){
                var hideMe = '<span style="display:none;" class="waio--noCompareAtPrice">[[strikethrough_price]]</span>';
                html_contents = html_contents.replaceMeW('[[strikethrough_price]]',hideMe);
            }
            var _discounted_price = WholesaleAIO.formatMoney(wholesalePrice, wholesalePriceCurrencyFormat);
            var _strikethrough_price = WholesaleAIO.formatMoney(productPrice, wholesalePriceCurrencyFormat);
            saved_fixed_amount = WholesaleAIO.formatMoney(WholesaleAIO.priceFormat(saved_fixed_amount), savedPriceCurrencyFormat);
          //alert(saved_fixed_amount)
            !saved_in_percent&&(saved_in_percent="");
            !saved_fixed_amount&&(saved_fixed_amount="");
            var html = html_contents.replaceMeW('[[wholesale_price]]',_discounted_price)
            .replaceMeW('[[strikethrough_price]]',_strikethrough_price)
            .replaceMeW('[[saved_in_percent]]',saved_in_percent)
            .replaceMeW('[[saved_fixed_amount]]',saved_fixed_amount);
            if(template === "product"){
                $(priceElement).html(html);
                $(priceElement).addClass("WAIO--"+mF(discountValue)+"-"+discountType+"-applied");
            }
            else{
                $("["+pIdAttrSelector+"='"+productId+"']").html(html);
                $("["+pIdAttrSelector+"='"+productId+"']").addClass("WAIO--"+mF(discountValue)+"-"+discountType+"-applied");
            }
        }

        function productOriginalPriceHTML(config){
            var $jscomp$destructuring$var0 = config, original_price = $jscomp$destructuring$var0.original_price, compare_at_price = $jscomp$destructuring$var0.compare_at_price, product_id = $jscomp$destructuring$var0.product_id, variant_id = $jscomp$destructuring$var0.variant_id, element = $jscomp$destructuring$var0.element, html_contents = $jscomp$destructuring$var0.html_contents, show_compare_at_price = $jscomp$destructuring$var0.show_compare_at_price;
            var disVal = Number(compare_at_price) - Number(original_price);
            var savedAmount=WholesaleAIO.savedAmount(mF(original_price),mF(disVal),"price_discount"),saved_in_percent="",saved_fixed_amount="";
            savedAmount&&!savedAmount.error?(saved_in_percent=savedAmount.in_percent,saved_fixed_amount=savedAmount.fixed_amount):log("WAIO Warning","Saved amount not working as expected. Debug code to find out the bug or error.","warning");
            if(Number(original_price) >= Number(compare_at_price)){
                var hideMe = '<span style="display:none;" class="waio--noCompareAtPrice">[[strikethrough_price]]</span>';
                html_contents = html_contents.replaceMeW('[[strikethrough_price]]',hideMe);
            }
            else if(!WholesaleAIO.settings.compare_at_price){
                var hideMe = '<span style="display:none;" class="waio--noCompareAtPrice">[[strikethrough_price]]</span>';
                html_contents = html_contents.replaceMeW('[[strikethrough_price]]',hideMe);
            }
            !saved_in_percent&&(saved_in_percent="");
            !saved_fixed_amount&&(saved_fixed_amount="");
            var normalPrice = WholesaleAIO.formatMoney(mF(original_price), currency_format);
          //console.warn(currency_format,'thgggggggggggggggggggggggggggggggg1122')
        //  console.warn(normalPrice,'thgggggggggggggggggggggggggggggggg')
            var compareAtPrice = WholesaleAIO.formatMoney(mF(compare_at_price), currency_format);
            var html = html_contents.replaceMeW('[[wholesale_price]]',normalPrice)
            .replaceMeW('[[strikethrough_price]]',compareAtPrice)
            .replaceMeW('[[saved_in_percent]]',saved_in_percent)
            .replaceMeW('[[saved_fixed_amount]]',saved_fixed_amount);
            return html;
        }

        function calc_discount(item,product_price){
            var value_range = [];
            item.volume_discount.forEach( function(v){
                value_range.push(v.value);
            });
            var min = Math.min.apply(null, value_range);
            var max = Math.max.apply(null, value_range);
            if(item.qb_calculation_type === "fixed_price"){
                return waioTranslations.from + WholesaleAIO.formatMoney(decimal(min), currency_format);
            }
            else if(item.qb_calculation_type === "price_discount"){
                if(product_price){
                product_price = product_price - (max*100);
                return waioTranslations.from + WholesaleAIO.formatMoney(product_price, currency_format);
                }
                else{
                return waioTranslations.from + WholesaleAIO.formatMoney(decimal(min), currency_format);
                }
            }
            else if(item.qb_calculation_type === "percent_discount"){
                if(product_price){
                product_price = product_price - ( ( product_price * max ) / 100);
                return waioTranslations.from + WholesaleAIO.formatMoney(product_price, currency_format);
                }
                else{
                return "Upto "+max+"% "+ waioTranslations.off;
                }
            }
        }

        // quantity breaks grid tables
        // calculate prices
        function calc_price(product,vd,data){
            var discount = 0;
            var product_price = 0;
            if(data.price){
                product_price = data.price;
            }
            var variant_id = data.variant_id || selected_variant_id;
            var z = current_product.variants.findIndex(function(x){return x.id == variant_id });
            if(z>-1 && !product_price){
                if(current_product.variants[z].price){
                    product_price = current_product.variants[z].price;
                }
            }
            if(!product_price){
                product_price = current_product.price;
            }
            if(data.quick_view){
                if(data.quick_view.price){
                    product_price = data.quick_view.price;
                }
            }
            product_price = mF(Number(product_price));
            if(!product_price){
                log("waio price warning:","Updated price not found in qb", "warning");
            }
            if(product.qb_calculation_type === "fixed_price"){
                if(product_price <= vd.value){
                    discount = 0;
                }
                else{
                    discount = product_price - vd.value;
                }
            }
            else if(product.qb_calculation_type === "price_discount"){
                if(product_price < vd.value){
                    discount = product_price;
                }
                else{
                discount = vd.value;
                }
            }
            else if(product.qb_calculation_type === "percent_discount"){
                discount = ( product_price * vd.value ) / 100;
            }
            product_price = product_price - discount;
            return WholesaleAIO.formatMoney(decimal(product_price), currency_format);
        }

        function calc_percent__price(product,vd,data){
            var discount = 0;
            var product_price = 0;
            if(data.price){
                product_price = data.price;
            }
            var variant_id = data.variant_id || selected_variant_id;
            var z = current_product.variants.findIndex(function(x){return x.id == variant_id });
            if(z>-1 && !product_price){
                if(current_product.variants[z].price){
                    product_price = current_product.variants[z].price;
                }
            }
            if(!product_price){
                product_price = current_product.price;
            }
            if(data.quick_view){
                if(data.quick_view.price){
                    product_price = data.quick_view.price;
                }
            }
            product_price = mF(Number(product_price));
            if(!product_price){
                log("waio price warning:","Updated price not found in qb", "warning");
            }
            if(product.qb_calculation_type === "fixed_price"){
                if(product_price <= vd.value){
                    discount = 0;
                }
                else{
                    discount = product_price - vd.value;
                }
            }
            else if(product.qb_calculation_type === "price_discount"){
                if(product_price < vd.value){
                    discount = product_price;
                }
                else{
                    discount = vd.value;
                }
            }
            else if(product.qb_calculation_type === "percent_discount"){
                discount = ( product_price * vd.value ) / 100;
            }
            var percentage = 100 - ((product_price - discount)/product_price)*100;
            percentage = decimal(percentage).toString().replace(/(.[0-9]*[1-9])0+$|.0*$/,'$1');
            return percentage+waioTranslations.percent_symbol;
        }

        function addQBTableAtPosition(element,table){
            var whereTo = null;
            if(element.indexOf(":") > -1){
                whereTo = element.split(":")[1];
                var newEl = element.split(":")[0];
                switch(whereTo){
                    case "append":
                        $(newEl).append(table);
                        break;
                    case "prepend":
                        $(newEl).prepend(table);
                        break;
                    case "before":
                        $(table).insertBefore(newEl);
                        break;
                    case "after":
                        $(table).insertAfter(newEl);
                        break;
                    default:
                    $(newEl).html(table);
                        break;
                }
            }
            else{
                $(element).html(table);
            }
        }

        function findLocationAndAddHTML(element, html){
            var whereTo = null;
            if(element.indexOf(":") > -1){
                whereTo = element.split(":")[1];
                var newEl = element.split(":")[0];
                switch(whereTo){
                    case "append":
                        $(newEl).append(html);
                        break;
                    case "prepend":
                        $(newEl).prepend(html);
                        break;
                    case "before":
                        $(html).insertBefore(newEl);
                        break;
                    case "after":
                        $(html).insertAfter(newEl);
                        break;
                    default:
                        $(newEl).html(html);
                        break;
                }
            }
            else{
                $(element).html(html);
            }
        }

        // tables grid
        function basic_grid(product,data, table_Id){
            if(product.volume_discount.length > 0){
                var table_data = "";
                var currency_symbol = "";
                var percent_symbol = "";
                product.volume_discount.sort(compareAndSortVD);
                product.volume_discount.forEach( function(vd,i){
                var next_qty = waioTranslations.range_so_on;
                if(product.volume_discount[i+1]){
                    next_qty = Number(product.volume_discount[i+1].qty) - 1;
                }
                if(product.qb_calculation_type === "percent_discount"){
                    percent_symbol = waioTranslations.percent_symbol;
                }
                else{
                    currency_symbol = waioTranslations.currency_symbol;
                }
                table_data += '<tr class="wholesale-grid-table custom-table">'
                +'<td style="'+general_settings.tableBorderColor()+'">'+vd.qty+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_price(product,vd,data)+'</td>'
                +'</tr>';
                });
                var table = '<table class="wholesale-table '+table_Id+' '+general_settings.tableTemplateClass()+'" style="'+general_settings.tableStyle()+'">'
                +'<thead style="'+general_settings.tableStyleThead()+'"><tr>'
                +'<th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.quantity+'</th>'
                +'<th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.price+'</th>'
                +'</tr></thead>'
                +'<tbody>'+table_data+'</tbody>'
                +'</table>';
                if(data.quick_view){
                    addQBTableAtPosition(data.quick_view.el,table);
                }
                else{
                    addQBTableAtPosition(data.el,table);
                }
            }
        }

        function detailed_grid(product,data, table_Id){
            if(product.volume_discount.length > 0){
                var table_data = "";
                var currency_symbol = "";
                var percent_symbol = "";
                product.volume_discount.sort(compareAndSortVD);
                product.volume_discount.forEach( function(vd,i){
                var next_qty = waioTranslations.range_so_on;
                if(product.volume_discount[i+1]){
                    next_qty = Number(product.volume_discount[i+1].qty) - 1;
                }
                if(product.qb_calculation_type === "percent_discount"){
                    percent_symbol = waioTranslations.percent_symbol;
                }
                else{
                    currency_symbol = waioTranslations.currency_symbol;
                }
                table_data += '<tr class="wholesale-grid-table custom-table">'
                +'<td style="'+general_settings.tableBorderColor()+'">'+waioTranslations.buy+ ' ' +vd.qty+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_price(product,vd,data)+'</td>'
                +'</tr>';
                });
                var table = '<table class="wholesale-table '+table_Id+' '+general_settings.tableTemplateClass()+'" style="'+general_settings.tableStyle()+'">'
                +'<thead style="'+general_settings.tableStyleThead()+'"><tr><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.quantity+'</th><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.price+'</th></tr></thead>'
                +'<tbody>'+table_data+'</tbody>'
                +'</table>';
                if(data.quick_view){
                    addQBTableAtPosition(data.quick_view.el,table);
                }
                else{
                    addQBTableAtPosition(data.el,table);
                }
            }
        }

        function grid_range(product,data, table_Id){
            if(product.volume_discount.length > 0){
                var table_data = "";
                var currency_symbol = "";
                var percent_symbol = "";
                product.volume_discount.sort(compareAndSortVD);
                product.volume_discount.forEach( function(vd,i){
                var next_qty = waioTranslations.range_so_on;
                if(product.volume_discount[i+1]){
                    next_qty = Number(product.volume_discount[i+1].qty) - 1;
                }
                if(product.qb_calculation_type === "percent_discount"){
                    percent_symbol = waioTranslations.percent_symbol;
                }
                else{
                    currency_symbol = waioTranslations.currency_symbol;
                }
                table_data += '<tr class="wholesale-grid-table custom-table">'
                +'<td style="'+general_settings.tableBorderColor()+'">'+vd.qty+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+next_qty+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_price(product,vd,data)+'</td>'
                +'</tr>';
                });
                var table = '<table class="wholesale-table '+table_Id+' '+general_settings.tableTemplateClass()+'" style="'+general_settings.tableStyle()+'">'
                +'<thead style="'+general_settings.tableStyleThead()+'"><tr><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.min_quantity+'</th><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.max_quantity+'</th><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.price+'</th></tr></thead>'
                +'<tbody>'+table_data+'</tbody>'
                +'</table>';
                if(data.quick_view){
                    addQBTableAtPosition(data.quick_view.el,table);
                }
                else{
                    addQBTableAtPosition(data.el,table);
                }
            }
        }

        function detailed_grid_percent(product,data, table_Id){
            if(product.volume_discount.length > 0){
                var table_data = "";
                var currency_symbol = "";
                var percent_symbol = "";
                product.volume_discount.sort(compareAndSortVD);
                product.volume_discount.forEach( function(vd,i){
                if(product.qb_calculation_type === "percent_discount"){
                    percent_symbol = waioTranslations.percent_symbol;
                }
                else{
                    currency_symbol = waioTranslations.currency_symbol;
                }
                table_data += '<tr class="wholesale-grid-table custom-table">'
                +'<td style="'+general_settings.tableBorderColor()+'">'+waioTranslations.buy+ ' ' +vd.qty+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_price(product,vd,data)+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_percent__price(product,vd,data)+''+waioTranslations.off+'</td>'
                +'</tr>';
                });
                var table = '<table class="wholesale-table '+table_Id+' '+general_settings.tableTemplateClass()+'" style="'+general_settings.tableStyle()+'">'
                +'<thead style="'+general_settings.tableStyleThead()+'"><tr><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.quantity+'</th>'
                +'<th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.price+'</th>'
                +'<th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.discount+'</th>'
                +'</tr></thead>'
                +'<tbody>'+table_data+'</tbody>'
                +'</table>';
                if(data.quick_view){
                    addQBTableAtPosition(data.quick_view.el,table);
                }
                else{
                    addQBTableAtPosition(data.el,table);
                }
            }
        }

        function percent_grid(product,data, table_Id){
            if(product.volume_discount.length > 0){
                var table_data = "";
                var currency_symbol = "";
                var percent_symbol = "";
                product.volume_discount.sort(compareAndSortVD);
                product.volume_discount.forEach( function(vd,i){
                var next_qty = waioTranslations.range_so_on;
                if(product.volume_discount[i+1]){
                    next_qty = Number(product.volume_discount[i+1].qty) - 1;
                }
                if(product.qb_calculation_type === "percent_discount"){
                    percent_symbol = waioTranslations.percent_symbol;
                }
                else{
                    currency_symbol = waioTranslations.currency_symbol;
                }
                table_data += '<tr class="wholesale-grid-table custom-table">'
                +'<td style="'+general_settings.tableBorderColor()+'">'+waioTranslations.buy+ ' ' +vd.qty+'</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_percent__price(product,vd,data)+''+waioTranslations.off+'</td>'
                +'</tr>';
                });
                var table = '<table class="wholesale-table '+table_Id+' '+general_settings.tableTemplateClass()+'" style="'+general_settings.tableStyle()+'">'
                +'<thead style="'+general_settings.tableStyleThead()+'"><tr><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.quantity+'</th><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.discount+'</th></tr></thead>'
                +'<tbody>'+table_data+'</tbody>'
                +'</table>';
                if(data.quick_view){
                    addQBTableAtPosition(data.quick_view.el,table);
                }
                else{
                    addQBTableAtPosition(data.el,table);
                }
            }
        }

        function grid_range_alternate(product,data, table_Id){
            if(product.volume_discount.length > 0){
                var qty = 0;
                var table_data = "";
                var currency_symbol = "";
                var percent_symbol = "";
                product.volume_discount.sort(compareAndSortVD);
                product.volume_discount.forEach( function(vd,i){
                var next_qty = waioTranslations.range_so_on;
                if(product.volume_discount[i+1]){
                    next_qty = Number(product.volume_discount[i+1].qty) - 1;
                }
                if(product.qb_calculation_type === "percent_discount"){
                    percent_symbol = waioTranslations.percent_symbol;
                }
                else{
                    currency_symbol = waioTranslations.currency_symbol;
                }
                table_data += '<tr class="wholesale-grid-table custom-table">'
                +'<td style="'+general_settings.tableBorderColor()+'">'+vd.qty+''+waioTranslations.range_seperator+''+next_qty + '</td>'
                +'<td style="'+general_settings.tableBorderColor()+'">'+calc_price(product,vd,data)+'</td>'
                +'</tr>';
                });
                var table = '<table class="wholesale-table '+table_Id+' '+general_settings.tableTemplateClass()+'" style="'+general_settings.tableStyle()+'">'
                +'<thead style="'+general_settings.tableStyleThead()+'"><tr><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.quantity+'</th><th style="'+general_settings.tableBorderColor()+'">'+waioTranslations.price+'</th></tr></thead>'
                +'<tbody>'+table_data+'</tbody>'
                +'</table>';
                if(data.quick_view){
                    addQBTableAtPosition(data.quick_view.el,table);
                }
                else{
                    addQBTableAtPosition(data.el,table);
                }
            }
        }

        function detectBrowserURLChange(config,callback){
            var changeDetector = waioSelectors.variantsChangeSelectorClass;
            var triggerMethod = "change";
            if("undefined" !== typeof config){
                if(config.changeSelector){
                    changeDetector = config.changeSelector;
                }
                if(config.triggerMethod){
                    triggerMethod = config.triggerMethod;
                }
            }
            var oldURL = "";
            $(document).on(triggerMethod, changeDetector ,function(e){
                var currentURL = window.location.href;
                if(currentURL != oldURL){
                    oldURL = currentURL;
                    callback({
                        urlChanged: true,
                        time: new Date().getTime()
                    },config);
                }
                else{
                    oldURL = currentURL;
                    callback({
                        urlChanged: false,
                        time: new Date().getTime()
                    },config);
                }
            });
        }

        // Quantity Controls functions
        function quantity_controller(config, callback){
            if("undefined"===typeof config)var config={};
            null===config&&(config={});
            var productId = config.productId || current_product.id;
            var variantId = config.variantId || selected_variant_id;
            var collectionId = config.collectionId || collection_id;
            var custom_message = config.message || null;
            var qc_variants = [];
            var qc_products = [];
            var qc_collections = [];
            var qc_entireStore = [];
            for(var iter = 0; iter < WholesaleAIO.quantity_controls.length; iter++){
                var rule = WholesaleAIO.quantity_controls[iter];
                if(rule.status !== "enabled") continue;
                if(rule.customer_group === "logged_in" && !is_loggedIn) continue;
                else if(rule.customer_group === "tag_based"){
                    if(!is_loggedIn) continue;
                    var cus_tags = customerTags.map(function (e) {
                    return e.toUpperCase()
                    });
                    var tagFound = false;
                    for(var iter1 = 0; iter1 < rule.customer_tags.length; iter1++){
                        var tag = rule.customer_tags[iter1];
                        if(cus_tags.indexOf(tag.toUpperCase())>-1){
                            tagFound = true; break;
                        }
                    }
                    if(!tagFound) continue;
                }



              getAllRelevantQC({
                rule: rule,
                variantId: variantId,
                productId: productId,
                collectionId: collectionId,
                qc_variants: qc_variants,
                qc_products: qc_products,
                qc_collections: qc_collections,
                qc_entireStore: qc_entireStore
              }, function(results){
                log("results",results);
                var pushData = {
                  variantId: variantId,
                  productId: productId,
                  collectionId: collectionId,
                  customer_group: rule.customer_group,
                  internal_name: rule.internal_name,
                  default_quantity: rule.default_quantity,
                  maximum_quantity: rule.maximum_quantity,
                  minimum_quantity: rule.minimum_quantity,
                  quantity_increment: rule.quantity_increment,
                  applies_to: rule.applies_to,
                  message: custom_message || rule.message,
                  selector_for_individual_variant: rule.selector_for_individual_variant,
                  minimum_quantity_method: rule.minimum_quantity_method
                };
                if(results.type === "variants" && results.status === "approved"){
                  pushData.variants = rule.variants;
                  qc_variants.push(pushData);
                }
                if(results.type === "products" && results.status === "approved"){
                  pushData.products = rule.products;
                  qc_products.push(pushData);
                }
                if(results.type === "collections" && results.status === "approved"){
                  pushData.collections = rule.collections;
                  qc_collections.push(pushData);
                }
                if(results.type === "entire_store" && results.status === "approved"){
                  pushData.entire_store = true;
                  qc_entireStore.push(pushData);
                }
              });
            }//end forloop
            log("qc_variants", qc_variants);
            log("qc_products", qc_products);
            log("qc_collections", qc_collections);
            log("qc_entireStore", qc_entireStore);
            var variants_final = [];
            var products_final = {};
            var collections_final = {};
            var entireStore_final = {};
            for(var iter = 0; iter < qc_variants.length; iter++){
              var v = qc_variants[iter];
              var vcg = variants_final.find(function(x){return x.customer_group});
              if( "undefined" !== typeof vcg ){

                switch(vcg){
                    case "tag_based":
                      if(vcg != "tag_based"){
                        variants_final.push(v);
                      }
                      break;
                    case "logged_in":
                      if(vcg != "tag_based"){
                        variants_final.push(v);
                      }
                      break;
                    case "all":
                      if(vcg != "tag_based" && variants_final.customer_group != "logged_in"){
                        variants_final.push(v);
                      }
                      break;
                  default:
                      break;
                  }



              }

              else{
                variants_final.push(v);
              }
            }
            for(var iter = 0; iter < qc_products.length; iter++){
              var v = qc_products[iter];
              if( "undefined" !== typeof products_final.customer_group ){
                switch(v.customer_group){
                  case "tag_based":
                      if(products_final.customer_group != "tag_based"){
                        products_final = v;
                      }
                      break;
                  case "logged_in":
                      if(products_final.customer_group != "tag_based"){
                        products_final = v;
                      }
                      break;
                  case "all":
                      if(products_final.customer_group != "tag_based" && products_final.customer_group != "logged_in"){
                        products_final = v;
                      }
                      break;
                  default:
                      break;
                  }
              }
              else{
                products_final = v;
              }
            }
            for(var iter = 0; iter < qc_collections.length; iter++){
              var v = qc_collections[iter];
              if( "undefined" !== typeof collections_final.customer_group ){
                switch(v.customer_group){
                  case "tag_based":
                      if(collections_final.customer_group != "tag_based"){
                        collections_final = v;
                      }
                      break;
                  case "logged_in":
                      if(collections_final.customer_group != "tag_based"){
                        collections_final = v;
                      }
                      break;
                  case "all":
                      if(collections_final.customer_group != "tag_based" && collections_final.customer_group != "logged_in"){
                        collections_final = v;
                      }
                      break;
                  default:
                      break;
                  }
              }
              else{
                collections_final = v;
              }
            }
              for(var iter = 0; iter < qc_entireStore.length; iter++){
              var v = qc_entireStore[iter];
              if( "undefined" !== typeof entireStore_final.customer_group ){
                switch(v.customer_group){
                  case "tag_based":
                      if(entireStore_final.customer_group != "tag_based"){
                        entireStore_final = v;
                      }
                      break;
                  case "logged_in":
                      if(entireStore_final.customer_group != "tag_based"){
                        entireStore_final = v;
                      }
                      break;
                  case "all":
                      if(entireStore_final.customer_group != "tag_based" && entireStore_final.customer_group != "logged_in"){
                        entireStore_final = v;
                      }
                      break;
                  default:
                      break;
                  }
              }
              else{
                entireStore_final = v;
              }
            }
            log("variants_final", variants_final);
            log("products_final", products_final);
            log("collections_final", collections_final);
            log("entireStore_final", entireStore_final);
            var quantity_controls = [];
            if("undefined" !== typeof variants_final.find(function(x){return x.applies_to})){
                variants_final.forEach(function(_d,i){quantity_controls.push(_d);});
                if("undefined" !== typeof products_final.applies_to){
                    quantity_controls.push(products_final);
                }
            }
            else if("undefined" !== typeof products_final.applies_to){
              quantity_controls.push(products_final);
            }
            else if("undefined" !== typeof collections_final.applies_to){
              quantity_controls.push(collections_final); 
            }
            else if("undefined" !== typeof entireStore_final.applies_to){
              quantity_controls.push(entireStore_final);
            }
            callback(null,{quantity_controls:quantity_controls})
          }
        
          
        function getAllRelevantQC(data, callback){
            var $jscomp$destructuring$var0 = data, rule = $jscomp$destructuring$var0.rule, qc_variants = $jscomp$destructuring$var0.qc_variants, qc_products = $jscomp$destructuring$var0.qc_products, qc_collections = $jscomp$destructuring$var0.qc_collections, qc_entireStore = $jscomp$destructuring$var0.qc_entireStore, variantId = $jscomp$destructuring$var0.variantId, productId = $jscomp$destructuring$var0.productId, collectionId = $jscomp$destructuring$var0.collectionId;
            var status = "rejected";
            switch (rule.applies_to) {
                case "variants":
                    if(variantId){
                        var find = rule.variants.findIndex(function(x){ return x.id == variantId });
                        if(find > -1){
                            status = "approved";
                        }
                    }
                    else{
                        log("WAIO Warning!","Variant id not found for Quantity controller applies to variants","warning");
                    }
                    if(productId){
                        var find = rule.variants.findIndex(function(x){ return x.product_id == productId });
                        if(find > -1){
                            status = "approved";
                        }
                    }
                break;
                case "products":
                    if(productId){
                        var find = rule.products.findIndex(function(x){ return x.id == productId });
                        if(find > -1){
                            status = "approved";
                        }
                    }
                    else{
                        log("WAIO Warning!","Product id not found for Quantity controller applies to products","warning");
                    }
                    if(variantId){
                        try{
                            for(var iter = 0; iter < rule.products.length; iter++){
                                var product =  rule.products[iter];
                                var find = product.variants.findIndex(function(x){ return x.id == variantId });
                                if(find > -1){
                                    status = "approved"; break;
                                }
                            }
                        }catch(e){log(e);}
                    }
                    break;
                case "collections":
                    if(collectionId){
                        if(rule.collections.findIndex(function(x){return x.id == collectionId }) > -1){
                            status = "approved";
                        }
                    }
                    else if(productId){
                        WholesaleAIO.collectionsOfProduct(productId, function(collectionIds){
                        log("collectionIds",collectionIds);
                            for(var iter = 0; iter < collectionIds.length; iter++){
                                var collId = collectionIds[iter];
                                if(rule.collections.findIndex(function(x){return x.id == collId }) > -1){
                                    status = "approved"; break;
                                }
                            }
                        });
                    }
                    else if(collection_handle == "all"){
                        if(qc_collections.length == 0){
                            status = "approved";
                        }
                        log("WAIO message: All collections rendered!")
                    }
                    else{
                        log("WAIO message: Current collection's id not found!","warning")
                    }
                    break;
                case "entire_store":
                    if(WholesaleAIO.template !== "product"){
                        if(qc_collections.length === 0 && qc_products.length === 0 && qc_variants.length === 0){
                            status = "approved";
                        }
                    }
                    else{
                        if(qc_variants.length === 0){
                            status = "approved";
                        }
                        {%if template.name == 'index' or template.name == 'search'%}
                        status = "approved";
                        {%endif%}
                    }
                    break;
                default:
                    break;
            }
            callback({type:rule.applies_to,status:status});
        }
        
        function quantityControls__cart(config, callback){
            if("undefined"===typeof config)var config={};
            null===config&&(config={});
            var elementSelector = config.elementSelector || "[data-variant-id]";
            var variantIdAttribute = config.variantIdAttribute || "data-variant-id";
            var productIdAttribute = config.productIdAttribute || "data-product-id";
            if($(elementSelector).length > 0){
                $(elementSelector).each(function(e,a){
                    var $variantId = $(this).attr(variantIdAttribute);
                    var $productId = $(this).attr(productIdAttribute);
                    config.variantId = $variantId;
                    if($productId){
                        config.productId = $productId;
                    }
                    WholesaleAllInOne.quantityController(config, function(e,quantity_controls){
                        if(e){
                            log(e);
                            callback(e, null);
                        }
                        else{
                            callback(null, {
                                quantity_controls: quantity_controls,
                                elementSelector: "["+variantIdAttribute+"='"+$variantId+"']"
                            });
                        };
                    });
                });
            }
            else{
                callback("elementSelector could not found any nodeElement. Config elementSelector for Quantity controller to work on cart template.", null);
            }
        }

        // End Quantity Controls functions

        WholesaleAllInOne.productTemplate = function(config){
            if(config.productId){
                WholesaleAIO.productInCollections(config.productId);
            }
            if(!WholesaleAIO.template){
                WholesaleAIO.template = "product";
            }
            if(WholesaleAIO.template !== "product"){
                WholesaleAIO.template = "product";
            }
            discountGroup__product(config);
            quantityBreak__product(config);
        }

        WholesaleAllInOne.cartDiscount = function(config){
            preDiscount__cart(config);
            initCheckout(config);
        }

        WholesaleAllInOne.cartDrawer = function(config){
            preDiscount__cart(config);
            initCheckout(config);
        }

        WholesaleAllInOne.HCSRPTemplate = function(config){
            if(!WholesaleAIO.template){
                WholesaleAIO.template = "collection";
            }
            if(WholesaleAIO.template.indexOf(".") > -1){
                log("WAIO LOG!", "Your current template is "+WholesaleAIO.template);
                WholesaleAIO.template = WholesaleAIO.template.split(".")[0];
                log("WAIO Warning!", "This is "+WholesaleAIO.template+" template. If it is not, please provide template parameter when initializing the function. Example: WholesaleAllInOne.HCSRPTemplate({template:'collection'})","warning")
            }
            discountGroup__hcsrp(config);
            //quantityBreak__hcsrp(config);
        }

        WholesaleAllInOne.relatedProducts = function(config){
            WholesaleAIO.template = "collection";
            discountGroup__hcsrp(config);
            //quantityBreak__hcsrp(config);
        }

        WholesaleAllInOne.couponCodeForm = function(config){
            additionalCouponCodeForm(config);
        }

        WholesaleAllInOne.variantChanged = function(config){
            detectBrowserURLChange(config, function(result,config){
                if("undefined"===typeof config)var config={};
                null===config&&(config={});
                setTimeout(function(config){
                    if(result){
                        if(result.urlChanged){
                            var oldV = selected_variant_id;
                            selected_variant_id = getOptURLValue("variant");
                            if(!selected_variant_id || selected_variant_id === null){
                                selected_variant_id = $(this).closest('form').find('[name="id"]').val();
                            }
                            if(!selected_variant_id){
                                log("WAIO Error:","Variant changed, but variant id not found.","warning");
                            }
                            else{
                                log("selected_variant_id was changed to from "+oldV,"to "+selected_variant_id);
                            }
                            if("undefined" === typeof config) var config = {};
                            config.variantId = selected_variant_id;
                            WholesaleAllInOne.productTemplate(config);
                        }
                    }
                }, config.timeOut || 500, config);
            });
        }

        WholesaleAllInOne.quickView = function(config){
            WholesaleAIO.template = "product";
            if(config.productHandle){
                WholesaleAIO.getProductByHandle(config.productHandle, function(error,product){
                    if(product){
                        current_product = product;
                        // selected_variant_id = product.variants[0].id;
                        WholesaleAIO.productInCollections(product.id);//prepare for collection discount
                        WholesaleAllInOne.productTemplate(config);
                    }
                    if(error){
                        log("WAIO Warning! ",error,"warning");
                    }
                });
            }
            else{
                if(config.quickViewButton){
                    var findHandle = $(config.quickViewButton).closest("a").attr("href");
                    if(config.quickViewHandleAttr){
                        findHandle = $(config.quickViewButton).closest("a").attr(config.quickViewHandleAttr);
                    }
                    if(findHandle && findHandle.lenth > 0){
                        var handle = findHandle;
                        if(findHandle.indexOf("/") > -1){
                            var handleArray = findHandle.split("/");
                            handle = handleArray[handleArray.length-1];
                            if(handle || handle.trim() !== ""){
                                handle = handle;
                            }
                            else{
                                handle = handleArray[handleArray.length-2];
                            }
                        }
                        log("WAIO LOG!", "Handle found for product is "+handle);
                        WholesaleAIO.getProductByHandle(handle, function(error,product){
                            if(product){
                                current_product = product;
                                // selected_variant_id = product.variants[0].id;
                                WholesaleAIO.productInCollections(product.id);//prepare for collection discount
                                WholesaleAllInOne.productTemplate(config);
                            }
                            if(error){
                                log("WAIO Warning! ",error,"warning");
                            }
                        });
                    }
                    else{
                        log("WAIO warning! ","Product handle was not found!", "warning");
                        WholesaleAllInOne.productTemplate(config);
                    }
                }
                else{
                    log("WAIO log! ","Quick view button's class or id not provided, we cannot get the handle of the product on quick view.","warning");
                    WholesaleAllInOne.productTemplate(config);
                }
            }
        }

        WholesaleAIO.getProductByHandle = function(handle, callback){
            if(!handle) callback(null);
            $.ajax({
                type: 'GET',
                url: '/products/'+handle+'.js',
                dataType: 'json',
                success: function(product){
                    callback(null,product);
                },
                error: function(error){
                    log("WAIO Warning! ","AJAX Error for get product by handle","warning");
                    callback(error,null);
                }
            });
        }

        WholesaleAIO.productInCollections = function(product_id){
            if(!product_id) { 
                return "Product id is missing";
            }
            var inCollects = [];
            if(WholesaleAIO.productInCollects){
                try{
                    var indexOfPC = WholesaleAIO.productInCollects.findIndex(function(x){return x.product_id==product_id});
                    var pc = -1<indexOfPC?WholesaleAIO.productInCollects[indexOfPC]:undefined;
                    if(typeof pc !== "undefined"){
                        pc.collection_ids.forEach(function(collection, i){
                            current_product_in_collections.push({
                            product_id: product_id,
                            collection_id: collection
                            });
                            inCollects.push(collection);
                        });
                    }
                }catch(e){log(e)}
                return inCollects;
            }
            else{
                return inCollects;
            }
        }

        WholesaleAIO.collectionsOfProduct = function(product_id, callback){
            if(!product_id) { 
                callback([]);
                return;
            }
            var inCollects = [];
            if(WholesaleAIO.productInCollects && WholesaleAIO.productInCollects.length > 0){
                try{
                    var indexOfPC = WholesaleAIO.productInCollects.findIndex(function(x){return x.product_id==product_id});
                    var pc = -1<indexOfPC?WholesaleAIO.productInCollects[indexOfPC]:undefined;
                    if(typeof pc !== "undefined"){
                        pc.collection_ids.forEach(function(collection, i){
                            inCollects.push(collection);
                        });
                    }
                }catch(e){log(e)}
                callback(inCollects);
            }
            else if(products_with_collections && products_with_collections.length > 0){
                for(var iter = 0; iter < products_with_collections.length; iter++){
                    var el = products_with_collections[iter];
                    if(el.collection_id && product_id == el.product_id){
                        inCollects.push(el.collection_id);
                    }
                    else if(el.id && product_id == el.product_id){
                        inCollects.push(el.id);
                    }
                }
                callback(inCollects);
            }
            else{
                callback(inCollects);
            }
        }

        WholesaleAllInOne.quantityController = function(config, callback){
            if("undefined"===typeof config)var config={};
            null===config&&(config={});
            if(config.productHandle){
                WholesaleAIO.getProductByHandle(config.productHandle, function(e,product){
                    if(product){
                        config.productId = product.id;
                        if(!config.variantId){
                            try{
                                config.variantId = product.variants[0].id;
                            }catch(e){log(e)}
                        }
                    }
                    quantity_controller(config, callback);
                });
            }
            else{
                quantity_controller(config, callback);
            }
        }

        WholesaleAllInOne.cartQuantityController = function(config,callback){
            quantityControls__cart(config,callback)
        }

        WholesaleAllInOne.checkout = function(){
            wholesaleDiscount__cart();
        }

        WholesaleAIO.removeAllEvents = function(el) {
            try{
                for(var iter = 0; iter < document.querySelectorAll(el).length; iter++){
                    var a = document.querySelectorAll(el)[iter];
                    a.parentNode.replaceChild(a.cloneNode(true), a);
                }
            }catch(e){log(e)}
        }

        WholesaleAIO.registerEvent = function(el, type, callback) {
            try{
                for(var iter = 0; iter < document.querySelectorAll(el).length; iter++){
                    var a = document.querySelectorAll(el)[iter];
                    a.addEventListener(type, callback);
                }
            }catch(e){log(e)}
        }

        {% include 'wholesale-all-in-one-custom' %}
        //Basic functions, and autocall when page reload.
        
        WholesaleAllInOne.couponCodeForm();
        WholesaleAIO.removeAllEvents(waioSelectors.checkout);
        WholesaleAIO.registerEvent(waioSelectors.checkout,"click", executeCheckout);
        WholesaleAllInOne.disable_checkout();
        WholesaleAllInOne.order_control();
        // waioSelectors.checkout

        // onChange functions
            $(document).on('change', waioSelectors.qtyInputFieldClass, function() {
                $("button[name*=update],input[name*=update]").click();
                $(waioSelectors.checkout).attr("disabled","disabled");
                setTimeout(function(){
                    WholesaleAllInOne.cartDiscount();
                },500);
            });
            $(document).on('click', waioSelectors.qtyPlusMinusClass, function() {
                setTimeout(function(){
                    WholesaleAllInOne.cartDiscount();
                },1000);
            });
        // END onChange functions
    };

var waioLoadScript=function(c,b){var a=document.createElement("script");a.type="text/javascript";a.readyState?a.onreadystatechange=function(){if("loaded"==a.readyState||"complete"==a.readyState)a.onreadystatechange=null,b()}:a.onload=function(){b()};a.src=c;document.getElementsByTagName("head")[0].appendChild(a)};
"undefined"===typeof jQuery||1.7>parseFloat(jQuery.fn.jquery)?waioLoadScript("//ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js",function(){WholesaleAIO.init(jQuery.noConflict(!0))}):WholesaleAIO.init(jQuery);

</script>
<style>.parent ~ .cchild{display:none}.open_rows .parent ~ .cchild{display:table-row}.parent_row ~ .child_row{display:none}.open_rows .parent_row ~ .child_row{display:table-row}.open_rows{display:table-row!important}tr#view_more_items{cursor:pointer}tr#view_more_item{cursor:pointer}.wholesale-table{border-collapse:collapse;width:100%;margin:.5rem 0}.wholesale-table td,.wholesale-table th{padding:8px}.wholesale-table th{padding-top:12px;padding-bottom:12px}.wholesale-table thead{text-align:left}.wholesale-table-simple tr{border-bottom:1px solid #ddd}.wholesale-table-simple tr:last-child{border-bottom:0 solid #ddd}.wholesale-table-simple th{border-bottom:2px solid #ddd}.wholesale-table-striped tr:nth-child(even){background-color:#f2f2f2}.wholesale-table-striped tr{border-bottom:1px solid #ddd}.wholesale-table-no-border tr{border:0 solid #ddd!important}.wholesale-table-striped th{border-bottom:2px solid #ddd}.wholesale-table-striped tr:last-child{border-bottom:0 solid #ddd}.wholesale-table-hover tbody tr:hover{background-color:#ddd}.wholesale-table-bordered td,.wholesale-table-bordered th,.wholesale-table-bordered tr{border:1px solid #ddd!important}.wholesale-table-bordered.th{border-bottom:2px solid #ddd!important}.product-is-on-wholesale{background:#eee;padding:.7rem;margin:.5rem 0}.coupon_code_invalid_msg{color:red;margin:.5rem 0}.waio-coupon-code-form{margin:1rem 0}.waio-coupon-code-form input[type=text]{border:1px solid #eee;background:0 0}.waio-saved-amount--msg{background-color:#eee;padding:4px 8px}.wholesale-ends-notification{margin-top:25px;margin-bottom:-5px}.checkout-disabled{pointer-events:none;cursor:not-allowed}.waio-coupon-code-form input[type=button]:hover{background-color:#04736b!important;border:1px solid #04736b!important}.waio-coupon-code-form{width:100%;display:flex;justify-content:flex-end}.waio-coupon-code-form input[type=button]{background-color:#03a196;color:#fff;border:1px solid #03a196;cursor:pointer;padding:0 1.4rem;letter-spacing:1px}.waio-coupon-code-form input[type=text]{width:100%;max-width:218px}.border-square input{border-radius:0}.border-round input{border-radius:3px!important}.border-round input[type=text]{border-top-right-radius:0!important;border-bottom-right-radius:0!important}.border-round input[type=button]{border-top-left-radius:0!important;border-bottom-left-radius:0!important;margin-left:0}.field-space input[type=text]{max-width:295px!important;margin-right:7px}.hundard-percent input{max-width:100%}.hundard-percent .waio-coupon-code-form{display:block}.hundard-percent input[type=text]{margin-bottom:10px}</style>
{% else %}
<script>console.error("Wholesale all in one app not running!")</script>
{% endif %}
{% if template.name == 'product' or template.name == 'index' %}
{{ 'waio-option-selection.js' | asset_url | script_tag }}
{% endif %}

